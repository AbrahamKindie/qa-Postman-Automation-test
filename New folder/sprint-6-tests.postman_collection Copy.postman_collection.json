{
	"info": {
		"_postman_id": "e0bfbcff-6d8a-46d3-b057-a87db0cd600b",
		"name": "sprint-6-tests.postman_collection Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40492307",
		"_collection_link": "https://universal-water-798936.postman.co/workspace/Meduron-API-Test~9619d7ae-1df5-40cf-9e09-6922bd8b251a/collection/30955435-e0bfbcff-6d8a-46d3-b057-a87db0cd600b?action=share&source=collection_link&creator=40492307"
	},
	"item": [
		{
			"name": "Admin API",
			"item": [
				{
					"name": "Note Management",
					"item": [
						{
							"name": "Get All Notes",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/note-admin",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"note-admin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a Note",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token-admin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/note-admin",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"note-admin"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{admin_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Subject Management",
					"item": [
						{
							"name": "Create a Subject",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token-admin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Test Subject\",\r\n  \"description\": \"Anatomy is the branch of science that studies the structure and organization of living organisms...\",\r\n  \"picture\": \"https://unsplash.com/photos/a-woman-in-a-yellow-dress-leaning-against-a-wall-2RYAWR9KrOs\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/subject",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"subject"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Subjects",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/subject",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"subject"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a Unit",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token-admin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Unit One\",\r\n  \"description\": \"Anatomy is the branch of science that studies the structure and organization of living organisms...\",\r\n  \"picture\": \"https://unsplash.com/photos/a-woman-in-a-yellow-dress-leaning-against-a-wall-2RYAWR9KrOs\",\r\n  \"subjectId\": \"146de1ae-1a3c-4b27-8d79-c8a1118c1a5c\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/unit",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"unit"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "File Management",
					"item": []
				}
			]
		},
		{
			"name": "User API",
			"item": [
				{
					"name": "Authentication",
					"item": [
						{
							"name": "User LogIn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"pass\",\r\n  \"usernameOrEmail\": \"admin_12\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/user-auth/login",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"user-auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Note",
					"item": [
						{
							"name": "Get All Subjects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should be in JSON format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"// Check if 'data' array exists and is not empty\r",
											"pm.test(\"'data' array should exist and contain at least one item\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"data\");\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\").that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Validate properties of the first item in 'data'\r",
											"pm.test(\"Each subject should have required properties\", function () {\r",
											"    jsonData.data.forEach(subject => {\r",
											"        pm.expect(subject).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(subject).to.have.property(\"title\").that.is.a(\"string\");\r",
											"        pm.expect(subject).to.have.property(\"description\").that.is.a(\"string\");\r",
											"        pm.expect(subject).to.have.property(\"picture\").that.is.a(\"string\");\r",
											"        pm.expect(subject).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
											"        pm.expect(subject).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
											"        pm.expect(subject).to.have.property(\"deletedAt\"); // Can be null\r",
											"        pm.expect(subject).to.have.property(\"totalNumOfViews\").that.is.a(\"number\");\r",
											"        pm.expect(subject).to.have.property(\"totalNumOfNotes\").that.is.a(\"number\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// Validate 'payload.pagination' structure\r",
											"pm.test(\"Payload should contain valid pagination details\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"payload\");\r",
											"    pm.expect(jsonData.payload).to.have.property(\"pagination\");\r",
											"\r",
											"    const pagination = jsonData.payload.pagination;\r",
											"\r",
											"    pm.expect(pagination).to.have.property(\"page\").that.is.a(\"number\");\r",
											"    pm.expect(pagination).to.have.property(\"itemsPerPage\").that.is.a(\"number\");\r",
											"    pm.expect(pagination).to.have.property(\"total\").that.is.a(\"number\");\r",
											"    pm.expect(pagination).to.have.property(\"lastPage\").that.is.a(\"number\");\r",
											"    pm.expect(pagination).to.have.property(\"prev\");\r",
											"    pm.expect(pagination).to.have.property(\"next\");\r",
											"    pm.expect(pagination).to.have.property(\"links\").that.is.an(\"array\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Base URL and Auth Token from Postman Environment\r",
											"// const baseURL = \"http://localhost:3001\";  // Local Host url\r",
											"const baseURL = \"https://api.medquizet.com\";  // Deploy url\r",
											"\r",
											"const authToken = pm.collectionVariables.get(\"user_token\"); // Make sure this is set\r",
											"\r",
											"if (!authToken) {\r",
											"    console.log(\"‚ùå No Auth Token Found! Make sure to authenticate first.\");\r",
											"    return;\r",
											"}\r",
											"\r",
											"// Function to fetch subjects and process notes\r",
											"function fetchSubjects() {\r",
											"    // Function to fetch all subjects (with Authorization)\r",
											"    pm.sendRequest({\r",
											"        url: `${baseURL}/note/subjects?page=1&itemsPerPage=12`,\r",
											"        method: \"GET\",\r",
											"        header: {\r",
											"            \"Authorization\": `Bearer ${authToken}`,\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        if (err) {\r",
											"            console.log(\"‚ùå Error fetching subjects:\", err);\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        if (res.code === 401) {\r",
											"            console.log(\"‚ùå Unauthorized! Please check your token.\");\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        let subjects = res.json().data;\r",
											"        if (!subjects || subjects.length === 0) {\r",
											"            console.log(\"‚ùå No subjects found.\");\r",
											"            return;\r",
											"        }\r",
											"        let subjectIds = subjects.map(subject => subject.id);\r",
											"        pm.environment.set(\"subjectIds\", JSON.stringify(subjectIds));\r",
											"        processSubject(subjectIds); // Start processing subjects\r",
											"        console.log(\"‚úÖ All Subject IDs:\", subjectIds);\r",
											"    });\r",
											"};\r",
											"\r",
											"\r",
											"\r",
											"// Copied code\r",
											"// Function to process a subject and find valid notes\r",
											"function processSubject(subjectIds) {\r",
											"    if (subjectIds.length === 0) {\r",
											"        console.log(\"‚ùå No valid subjects left to check.\");\r",
											"        return;\r",
											"    }\r",
											"\r",
											"    let randomIndex = Math.floor(Math.random() * subjectIds.length);\r",
											"    let randomSubjectId = subjectIds[randomIndex];\r",
											"\r",
											"    console.log(\"üîç Checking Subject ID:\", randomSubjectId);\r",
											"    pm.environment.set(\"randomSubjectId\", randomSubjectId);\r",
											"    pm.sendRequest({\r",
											"        url: `${baseURL}/note?subjectId=${randomSubjectId}`,\r",
											"        method: \"GET\",\r",
											"        header: {\r",
											"            \"Authorization\": `Bearer ${authToken}`,\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        if (err) {\r",
											"            console.log(\"‚ùå Error fetching notes:\", err);\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        if (res.code === 401) {\r",
											"            console.log(\"‚ùå Unauthorized! Please check your token.\");\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        let notes = res.json().data;\r",
											"\r",
											"        if (notes && notes.length > 0) {\r",
											"            let validNoteIds = [];\r",
											"            let hasValidNote = false; // Flag to track if we found a valid note\r",
											"\r",
											"            notes.forEach(item => {\r",
											"                let userNote = item.userNotes[0]; // Get the first (only) userNote\r",
											"\r",
											"                if (userNote && userNote.highlights && userNote.highlights.length > 0) {\r",
											"                    validNoteIds.push(item.id);\r",
											"                    hasValidNote = true; // Set flag to true if we find a valid note\r",
											"                }\r",
											"            });\r",
											"\r",
											"            if (hasValidNote) {\r",
											"                console.log(\"‚úÖ Stored All Valid Note IDs that have highlights:\", validNoteIds);\r",
											"                pm.environment.set(\"validNoteIds\", JSON.stringify(validNoteIds));\r",
											"\r",
											"                let randomIndex = Math.floor(Math.random() * validNoteIds.length);\r",
											"                let randomNoteId = validNoteIds[randomIndex];\r",
											"                pm.environment.set(\"randomNoteId\", JSON.stringify(randomNoteId));\r",
											"            } else {\r",
											"                console.log(\"‚ùå No valid notes found, trying another Subject ID...\");\r",
											"                let randomIndex = Math.floor(Math.random() * subjectIds.length);\r",
											"                subjectIds.splice(randomIndex, 1);\r",
											"                processSubject(subjectIds); // Try another subject\r",
											"                return;\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"};\r",
											"\r",
											"// Start the process\r",
											"fetchSubjects();\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/note/subjects?page=1&itemsPerPage=12",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"note",
										"subjects"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "itemsPerPage",
											"value": "12"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Notes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/note?subjectId={{randomSubjectId}}&page=1&itemsPerPage=8",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"note"
									],
									"query": [
										{
											"key": "subjectId",
											"value": "{{randomSubjectId}}"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "itemsPerPage",
											"value": "8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Single Note",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/note/{{randomValidNoteId}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"note",
										"{{randomValidNoteId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Note Highlights",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is valid JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"// Validate Unit object\r",
											"pm.test(\"Unit object is present and has required fields\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"Unit\");\r",
											"    pm.expect(jsonData.Unit).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.Unit).to.have.property(\"title\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.Unit).to.have.property(\"description\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.Unit).to.have.property(\"picture\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.Unit).to.have.property(\"subjectId\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.Unit).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.Unit).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.Unit).to.have.property(\"deletedAt\");\r",
											"});\r",
											"\r",
											"// Validate Subject inside Unit\r",
											"pm.test(\"Subject object inside Unit is valid\", function () {\r",
											"    pm.expect(jsonData.Unit).to.have.property(\"subject\");\r",
											"    pm.expect(jsonData.Unit.subject).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(jsonData.Unit.subject).to.have.property(\"title\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"// Validate userNotes array\r",
											"pm.test(\"userNotes array is present\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"userNotes\").that.is.an(\"array\");\r",
											"    if (jsonData.userNotes.length > 0) {\r",
											"        jsonData.userNotes.forEach(note => {\r",
											"            pm.expect(note).to.have.property(\"id\").that.is.a(\"string\");\r",
											"            pm.expect(note).to.have.property(\"highlights\").that.is.an(\"array\");\r",
											"            pm.expect(note).to.have.property(\"progress\").that.is.a(\"number\");\r",
											"        });\r",
											"    }\r",
											"});\r",
											"\r",
											"// Validate highlights inside userNotes\r",
											"pm.test(\"Highlights inside userNotes are valid\", function () {\r",
											"    jsonData.userNotes.forEach(note => {\r",
											"        note.highlights.forEach(highlight => {\r",
											"            pm.expect(highlight).to.have.property(\"id\").that.is.a(\"string\");\r",
											"            pm.expect(highlight).to.have.property(\"page\").that.is.a(\"number\");\r",
											"            pm.expect(highlight).to.have.property(\"color\").that.is.a(\"string\");\r",
											"            pm.expect(highlight).to.have.property(\"endOffset\").that.is.a(\"number\");\r",
											"            pm.expect(highlight).to.have.property(\"startOffset\").that.is.a(\"number\");\r",
											"            pm.expect(highlight).to.have.property(\"highlightText\").that.is.a(\"string\");\r",
											"\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"// Arrays to store highlight IDs and colors\r",
											"let highlightIds = [];\r",
											"let highlightColors = [];\r",
											"\r",
											"\r",
											"if (jsonData.userNotes) {\r",
											"    jsonData.userNotes.forEach(note => {\r",
											"        note.highlights.forEach(highlight => {\r",
											"            highlightIds.push(highlight.id);\r",
											"            highlightColors.push(highlight.color);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"// Store initial count of highlights\r",
											"const initialHighlightCount = highlightIds.length;\r",
											"pm.environment.set(\"initialHighlightCount\", initialHighlightCount);\r",
											"\r",
											"// Check if we have any highlights\r",
											"pm.test(\"Check if highlights exist\", function () {\r",
											"    pm.expect(highlightIds.length).to.be.greaterThan(0, \"No highlights found in response\");\r",
											"});\r",
											"\r",
											"if (highlightIds.length > 0) {\r",
											"    const randomIndex = Math.floor(Math.random() * highlightIds.length);\r",
											"    const randomHighlightId = highlightIds[randomIndex];\r",
											"    const randomHighlightColor = highlightColors[randomIndex];\r",
											"\r",
											"    // Determine the new color\r",
											"    let selectedColor;\r",
											"    if (randomHighlightColor === \"#FFFF00\") {\r",
											"        selectedColor = \"#FA7E74\";\r",
											"    } else if (randomHighlightColor === \"#FA7E74\") {\r",
											"        selectedColor = \"#FFFF00\";\r",
											"    } else {\r",
											"        selectedColor = randomHighlightColor;\r",
											"    }\r",
											"\r",
											"    // Store variables for later use\r",
											"    pm.environment.set(\"randomHighlightId\", randomHighlightId);\r",
											"    pm.environment.set(\"selectedColor\", selectedColor);\r",
											"\r",
											"    console.log(\"Stored Highlight ID:\", randomHighlightId);\r",
											"    console.log(\"Stored Color:\", selectedColor);\r",
											"\r",
											"    // **Assertions to verify stored values**\r",
											"    pm.test(\"Check if highlight ID is stored\", function () {\r",
											"        pm.expect(pm.environment.get(\"randomHighlightId\")).to.equal(randomHighlightId, \"Highlight ID was not stored correctly\");\r",
											"    });\r",
											"\r",
											"    pm.test(\"Check if selected color is stored\", function () {\r",
											"        pm.expect(pm.environment.get(\"selectedColor\")).to.equal(selectedColor, \"Selected color was not stored correctly\");\r",
											"    });\r",
											"\r",
											"} else {\r",
											"    console.log(\"No highlights found in response.\");\r",
											"}\r",
											"\r",
											"// **Negative Test 1: Missing Unit Object**\r",
											"pm.test(\"Negative Test: Unit object is missing\", function () {\r",
											"    pm.expect(jsonData).to.not.have.property(\"Unit\", \"Unit object is missing in response\");\r",
											"});\r",
											"\r",
											"// **Negative Test 2: Missing userNotes Array**\r",
											"pm.test(\"Negative Test: userNotes array is missing\", function () {\r",
											"    pm.expect(jsonData).to.not.have.property(\"userNotes\", \"userNotes array is missing in response\");\r",
											"});\r",
											"\r",
											"// **Negative Test 3: Invalid highlight properties**\r",
											"pm.test(\"Negative Test: Highlights with invalid properties\", function () {\r",
											"    jsonData.userNotes.forEach(note => {\r",
											"        note.highlights.forEach(highlight => {\r",
											"            // Check if highlight fields exist and have correct types\r",
											"            pm.expect(highlight).to.have.property(\"id\").that.is.a(\"string\");\r",
											"            pm.expect(highlight).to.have.property(\"color\").that.is.a(\"string\");\r",
											"            pm.expect(highlight).to.have.property(\"highlightText\").that.is.a(\"string\");\r",
											"\r",
											"            // Negative check for missing or invalid properties\r",
											"            pm.expect(highlight).to.not.have.property(\"invalidField\", \"Unexpected field found in highlight\");\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"// **Negative Test 4: Non-existent Highlight ID**\r",
											"pm.test(\"Negative Test: Non-existent Highlight ID\", function () {\r",
											"    const invalidHighlightId = \"nonexistent-id\";\r",
											"    const highlight = jsonData.userNotes.flatMap(note => note.highlights).find(h => h.id === invalidHighlightId);\r",
											"    pm.expect(highlight).to.not.exist;\r",
											"});\r",
											"\r",
											"// **Negative Test 5: Check if Highlight has missing `color` field**\r",
											"pm.test(\"Negative Test: Missing color field in highlights\", function () {\r",
											"    jsonData.userNotes.forEach(note => {\r",
											"        note.highlights.forEach(highlight => {\r",
											"            if (!highlight.color) {\r",
											"                pm.expect(highlight.color).to.not.equal(undefined, \"Color field should not be undefined\");\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"// Log for debugging\r",
											"console.log(\"Highlight IDs found:\", highlightIds);\r",
											"console.log(\"Highlight Colors found:\", highlightColors);\r",
											"\r",
											"\r",
											"// pm.test(\"Status code is 200\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"// });\r",
											"\r",
											"// pm.test(\"Response is valid JSON\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });\r",
											"\r",
											"// const jsonData = pm.response.json();\r",
											"\r",
											"// // ‚úÖ Validate Unit object\r",
											"// pm.test(\"Unit object is present and has required fields\", function () {\r",
											"//     pm.expect(jsonData).to.have.property(\"Unit\");\r",
											"//     pm.expect(jsonData.Unit).to.have.property(\"id\").that.is.a(\"string\");\r",
											"//     pm.expect(jsonData.Unit).to.have.property(\"title\").that.is.a(\"string\");\r",
											"//     pm.expect(jsonData.Unit).to.have.property(\"description\").that.is.a(\"string\");\r",
											"//     pm.expect(jsonData.Unit).to.have.property(\"picture\").that.is.a(\"string\");\r",
											"//     pm.expect(jsonData.Unit).to.have.property(\"subjectId\").that.is.a(\"string\");\r",
											"//     pm.expect(jsonData.Unit).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
											"//     pm.expect(jsonData.Unit).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
											"//     pm.expect(jsonData.Unit).to.have.property(\"deletedAt\");\r",
											"// });\r",
											"\r",
											"// // ‚úÖ Validate Subject inside Unit\r",
											"// pm.test(\"Subject object inside Unit is valid\", function () {\r",
											"//     pm.expect(jsonData.Unit).to.have.property(\"subject\");\r",
											"//     pm.expect(jsonData.Unit.subject).to.have.property(\"id\").that.is.a(\"string\");\r",
											"//     pm.expect(jsonData.Unit.subject).to.have.property(\"title\").that.is.a(\"string\");\r",
											"// });\r",
											"\r",
											"// // ‚úÖ Validate userNotes array\r",
											"// pm.test(\"userNotes array is present\", function () {\r",
											"//     pm.expect(jsonData).to.have.property(\"userNotes\").that.is.an(\"array\");\r",
											"// });\r",
											"\r",
											"// // Arrays to store highlight IDs and colors\r",
											"// let highlightIds = [];\r",
											"// let highlightColors = [];\r",
											"\r",
											"// // ‚úÖ Validate userNotes and their highlights\r",
											"// if (jsonData.userNotes && jsonData.userNotes.length > 0) {\r",
											"//     jsonData.userNotes.forEach(note => {\r",
											"//         pm.expect(note).to.have.property(\"id\").that.is.a(\"string\");\r",
											"//         pm.expect(note).to.have.property(\"highlights\").that.is.an(\"array\");\r",
											"//         pm.expect(note).to.have.property(\"progress\").that.is.a(\"number\");\r",
											"\r",
											"//         note.highlights.forEach(highlight => {\r",
											"//             pm.expect(highlight).to.have.property(\"id\").that.is.a(\"string\");\r",
											"//             pm.expect(highlight).to.have.property(\"page\").that.is.a(\"number\");\r",
											"//             pm.expect(highlight).to.have.property(\"color\").that.is.a(\"string\");\r",
											"//             pm.expect(highlight).to.have.property(\"endOffset\").that.is.a(\"number\");\r",
											"//             pm.expect(highlight).to.have.property(\"startOffset\").that.is.a(\"number\");\r",
											"//             pm.expect(highlight).to.have.property(\"highlightText\").that.is.a(\"string\");\r",
											"\r",
											"//             highlightIds.push(highlight.id);\r",
											"//             highlightColors.push(highlight.color);\r",
											"//         });\r",
											"//     });\r",
											"// }\r",
											"\r",
											"// // ‚úÖ Store initial highlight count\r",
											"// const initialHighlightCount = highlightIds.length;\r",
											"// pm.environment.set(\"initialHighlightCount\", initialHighlightCount);\r",
											"\r",
											"// // ‚úÖ Check if we have any highlights\r",
											"// pm.test(\"Check if highlights exist\", function () {\r",
											"//     pm.expect(highlightIds.length).to.be.greaterThan(0, \"No highlights found in response\");\r",
											"// });\r",
											"\r",
											"// // ‚úÖ If we have highlights, pick a random one\r",
											"// if (highlightIds.length > 0) {\r",
											"//     const randomIndex = Math.floor(Math.random() * highlightIds.length);\r",
											"//     const randomHighlightId = highlightIds[randomIndex];\r",
											"//     const randomHighlightColor = highlightColors[randomIndex];\r",
											"\r",
											"//     // ‚úÖ Determine the new color\r",
											"//     let selectedColor;\r",
											"//     if (randomHighlightColor === \"#FFFF00\") {\r",
											"//         selectedColor = \"#FA7E74\";\r",
											"//     } else if (randomHighlightColor === \"#FA7E74\") {\r",
											"//         selectedColor = \"#FFFF00\";\r",
											"//     } else {\r",
											"//         selectedColor = randomHighlightColor;\r",
											"//     }\r",
											"\r",
											"//     // ‚úÖ Store variables for later use\r",
											"//     pm.environment.set(\"randomHighlightId\", randomHighlightId);\r",
											"//     pm.environment.set(\"selectedColor\", selectedColor);\r",
											"\r",
											"//     console.log(\"Stored Highlight ID:\", randomHighlightId);\r",
											"//     console.log(\"Stored Color:\", selectedColor);\r",
											"\r",
											"//     // ‚úÖ Assertions to verify stored values\r",
											"//     pm.test(\"Check if highlight ID is stored\", function () {\r",
											"//         pm.expect(pm.environment.get(\"randomHighlightId\")).to.equal(randomHighlightId, \"Highlight ID was not stored correctly\");\r",
											"//     });\r",
											"\r",
											"//     pm.test(\"Check if selected color is stored\", function () {\r",
											"//         pm.expect(pm.environment.get(\"selectedColor\")).to.equal(selectedColor, \"Selected color was not stored correctly\");\r",
											"//     });\r",
											"// } else {\r",
											"//     console.log(\"No highlights found in response.\");\r",
											"// }\r",
											"\r",
											"// // ‚ùå **Negative Tests**\r",
											"// pm.test(\"Negative Test: Unit object is missing\", function () {\r",
											"//     pm.expect(jsonData).to.not.have.property(\"Unit\", \"Unit object is missing in response\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Negative Test: userNotes array is missing\", function () {\r",
											"//     pm.expect(jsonData).to.not.have.property(\"userNotes\", \"userNotes array is missing in response\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Negative Test: Highlights with invalid properties\", function () {\r",
											"//     if (jsonData.userNotes) {\r",
											"//         jsonData.userNotes.forEach(note => {\r",
											"//             note.highlights.forEach(highlight => {\r",
											"//                 pm.expect(highlight).to.have.property(\"id\").that.is.a(\"string\");\r",
											"//                 pm.expect(highlight).to.have.property(\"color\").that.is.a(\"string\");\r",
											"//                 pm.expect(highlight).to.have.property(\"highlightText\").that.is.a(\"string\");\r",
											"\r",
											"//                 pm.expect(highlight).to.not.have.property(\"invalidField\", \"Unexpected field found in highlight\");\r",
											"//             });\r",
											"//         });\r",
											"//     }\r",
											"// });\r",
											"\r",
											"// pm.test(\"Negative Test: Non-existent Highlight ID\", function () {\r",
											"//     const invalidHighlightId = \"nonexistent-id\";\r",
											"//     const highlight = jsonData.userNotes?.flatMap(note => note.highlights)?.find(h => h.id === invalidHighlightId);\r",
											"//     pm.expect(highlight).to.not.exist;\r",
											"// });\r",
											"\r",
											"// pm.test(\"Negative Test: Missing color field in highlights\", function () {\r",
											"//     if (jsonData.userNotes) {\r",
											"//         jsonData.userNotes.forEach(note => {\r",
											"//             note.highlights.forEach(highlight => {\r",
											"//                 pm.expect(highlight).to.have.property(\"color\");\r",
											"//             });\r",
											"//         });\r",
											"//     }\r",
											"// });\r",
											"\r",
											"// // ‚úÖ Debugging logs\r",
											"// console.log(\"Highlight IDs found:\", highlightIds);\r",
											"// console.log(\"Highlight Colors found:\", highlightColors);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let validNoteIds = JSON.parse(pm.environment.get(\"validNoteIds\") || \"[]\");\r",
											"let randomValidNoteId = validNoteIds[Math.floor(Math.random() * validNoteIds.length)];\r",
											"pm.environment.set(\"randomValidNoteId\", randomValidNoteId);\r",
											"console.log(\"‚úÖ Using Random Valid Note ID:\", randomValidNoteId);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/note/{{randomValidNoteId}}?page=1",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"note",
										"{{randomValidNoteId}}"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Note Highlights",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is valid JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Highlights inside userNotes are valid\", function () {\r",
											"    if (jsonData.userNotes) {\r",
											"        jsonData.userNotes.forEach(note => {\r",
											"            note.highlights.forEach(highlight => {\r",
											"                pm.expect(highlight).to.have.property(\"id\").that.is.a(\"string\");\r",
											"                pm.expect(highlight).to.have.property(\"page\").that.is.a(\"number\");\r",
											"                pm.expect(highlight).to.have.property(\"color\").that.is.a(\"string\");\r",
											"                pm.expect(highlight).to.have.property(\"endOffset\").that.is.a(\"number\");\r",
											"                pm.expect(highlight).to.have.property(\"startOffset\").that.is.a(\"number\");\r",
											"                pm.expect(highlight).to.have.property(\"highlightText\").that.is.a(\"string\");\r",
											"            });\r",
											"        });\r",
											"    }\r",
											"});\r",
											"\r",
											"// Get stored values\r",
											"const expectedHighlightId = pm.environment.get(\"randomHighlightId\");\r",
											"const expectedColor = pm.environment.get(\"selectedColor\");\r",
											"\r",
											"// **Assertions to verify the response**\r",
											"pm.test(\"Verify the PATCH request updated the correct highlight\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"highlights\").that.is.an(\"array\").with.length.greaterThan(0);\r",
											"\r",
											"    // Find the updated highlight\r",
											"    const updatedHighlight = jsonData.highlights.find(h => h.id === expectedHighlightId);\r",
											"\r",
											"    // Ensure the highlight exists\r",
											"    pm.expect(updatedHighlight, `Highlight with ID ${expectedHighlightId} was not found`).to.exist;\r",
											"\r",
											"    // Ensure the color was updated correctly\r",
											"    pm.expect(updatedHighlight.color, `Expected color: ${expectedColor}, but got: ${updatedHighlight.color}`)\r",
											"        .to.equal(expectedColor);\r",
											"});\r",
											"\r",
											"// Negative Test 1: Check for missing highlight ID\r",
											"pm.test(\"Negative Test: Highlight ID should exist\", function () {\r",
											"    const invalidHighlightId = \"nonexistent-id\";\r",
											"    const highlight = jsonData.highlights.find(h => h.id === invalidHighlightId);\r",
											"    pm.expect(highlight, `Highlight with ID ${invalidHighlightId} should not exist`).to.not.exist;\r",
											"});\r",
											"\r",
											"// Negative Test 2: Check for missing color field after update\r",
											"pm.test(\"Negative Test: Color field should be present\", function () {\r",
											"    const missingColorHighlight = jsonData.highlights.find(h => !h.color);\r",
											"    pm.expect(missingColorHighlight, \"Some highlights are missing the color field\").to.not.exist;\r",
											"});\r",
											"\r",
											"// Negative Test 3: Check for unchanged highlight ID and color\r",
											"pm.test(\"Negative Test: Highlight should not be updated with wrong color\", function () {\r",
											"    const wrongColor = \"#123456\"; // Invalid color for test\r",
											"    const unchangedHighlight = jsonData.highlights.find(h => h.id === expectedHighlightId);\r",
											"    if (unchangedHighlight) {\r",
											"        pm.expect(unchangedHighlight.color, `Expected color: ${wrongColor}, but it should not match`).to.not.equal(wrongColor);\r",
											"    }\r",
											"});\r",
											"\r",
											"// Log for debugging\r",
											"console.log(\"Expected ID:\", expectedHighlightId);\r",
											"console.log(\"Expected Color:\", expectedColor);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"highlights\": [\r\n        {\r\n            \"id\": \"{{randomHighlightId}}\",   // Dynamically use the random ID\r\n            \"page\": 1,\r\n            \"color\": \"{{selectedColor}}\",\r\n            \"endOffset\": 1636,\r\n            \"startOffset\": 1582,\r\n            \"highlightText\": \"Sacrum Is formed by\\n  the fusion of 5 sacral vertebrae\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/note/{{randomValidNoteId}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"note",
										"{{randomValidNoteId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Highlight ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ‚úÖ Positive Test 1: Status Code Check\r",
											"pm.test(\"Highlight deleted successfully and Status code is 200 \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// ‚úÖ Positive Test 3: Verify total highlight count decreased by 1\r",
											"pm.test(\"Highlight count decreased by 1\", function () {\r",
											"pm.sendRequest({\r",
											"    url: pm.request.url.toString(),  // Dynamically use the request URL\r",
											"    method: 'GET'\r",
											"}, function (err, res) {\r",
											"    if (!err) {\r",
											"        const newJsonData = res.json();\r",
											"        let newHighlightCount = 0;\r",
											"\r",
											"        if (newJsonData.userNotes) {\r",
											"            newJsonData.userNotes.forEach(note => {\r",
											"                newHighlightCount += note.highlights.length;\r",
											"\r",
											"                \r",
											"            });\r",
											"        }\r",
											"\r",
											"        \r",
											"        const initialCount = pm.environment.get(\"initialHighlightCount\");\r",
											"        \r",
											"            pm.expect(newHighlightCount).to.equal(initialCount - 1, `Expected count: ${initialCount - 1}, but got: ${newHighlightCount}`);\r",
											"        \r",
											"\r",
											"        console.log(\"Initial count:\", initialCount);\r",
											"        console.log(\"New count after deletion:\", newHighlightCount);\r",
											"    }\r",
											"});\r",
											"});\r",
											"\r",
											"\r",
											"// ‚úÖ Positive Test 3: Verify Deleted highlight ID is no longer present\r",
											"pm.test(\"Deleted highlight ID is no longer present\", function () {\r",
											" \r",
											" pm.sendRequest({\r",
											"    url: pm.request.url.toString(),  // Dynamically use the request URL\r",
											"    method: 'GET'\r",
											"}, function (err, res) {\r",
											"\r",
											"    if (!err) {\r",
											"        const newJsonData = res.json()\r",
											"        let deletedHighlightId = pm.environment.get(\"randomHighlightId\");\r",
											"\r",
											"        if (newJsonData.userNotes) {\r",
											"            newJsonData.userNotes.forEach(note => {\r",
											"                newHighlightCount += note.highlights.length;\r",
											"\r",
											"        \r",
											"                    const highlightIds = note.highlights.map(h => h.id);\r",
											"                    pm.expect(highlightIds).to.not.include(deletedHighlightId, \"Deleted highlight is still found in the response\");\r",
											"                \r",
											"            });\r",
											"       }\r",
											"              }\r",
											"});\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"highlights\": [\r\n        {\r\n            \"id\": \"{{randomHighlightId}}\", // Dynamically use the random ID\r\n            \"page\": 1,\r\n            \"color\": \"{{selectedColor}}\",\r\n            \"endOffset\": 1636,\r\n            \"startOffset\": 0,\r\n            \"highlightText\": \"Sacrum Is formed by\\n  the fusion of 5 sacral vertebrae\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/note/{{randomValidNoteId}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"note",
										"{{randomValidNoteId}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "File",
					"item": []
				},
				{
					"name": "Question",
					"item": []
				}
			]
		},
		{
			"name": "Shared Endpoints",
			"item": [
				{
					"name": "Notifications",
					"item": [
						{
							"name": "get Notification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let responseData = pm.response.json(); // Parse the response JSON\r",
											"\r",
											"// Ensure the response is an array\r",
											"pm.test(\"Response should be an array\", function () {\r",
											"    pm.expect(responseData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"if (Array.isArray(responseData) && responseData.length > 0) {\r",
											"    let notificationIds = []; // Array to store all notification IDs\r",
											"\r",
											"    responseData.forEach((notification, index) => {\r",
											"        pm.test(`Notification ${index + 1} has required fields`, function () {\r",
											"            pm.expect(notification).to.have.property(\"id\").that.is.a(\"string\");\r",
											"            pm.expect(notification).to.have.property(\"title\").that.is.a(\"string\");\r",
											"            pm.expect(notification).to.have.property(\"body\").that.is.a(\"string\");\r",
											"            pm.expect(notification).to.have.property(\"isRead\").that.is.a(\"boolean\");\r",
											"            pm.expect(notification).to.have.property(\"isCleared\").that.is.a(\"boolean\");\r",
											"\r",
											"            pm.expect(notification).to.have.property(\"link\");\r",
											"            pm.expect(notification.link).to.satisfy(value => value === null || typeof value === \"string\");\r",
											"\r",
											"            pm.expect(notification).to.have.property(\"type\").that.is.a(\"string\");\r",
											"\r",
											"            pm.expect(notification).to.have.property(\"data\");\r",
											"            pm.expect(notification.data).to.satisfy(value => value === null || typeof value === \"object\");\r",
											"\r",
											"            pm.expect(notification).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
											"\r",
											"            // Validate createdAt is a valid date\r",
											"            pm.test(`Notification ${index + 1} has a valid createdAt`, function () {\r",
											"                let createdAt = new Date(notification.createdAt);\r",
											"                pm.expect(createdAt.toString()).to.not.eql(\"Invalid Date\");\r",
											"            });\r",
											"        });\r",
											"\r",
											"        // Add notification ID to the array\r",
											"        notificationIds.push(notification.id);\r",
											"    });\r",
											"\r",
											"    // Store all notification IDs as a JSON string in the environment\r",
											"    pm.environment.set(\"notificationIds\", JSON.stringify(notificationIds));\r",
											"\r",
											"    // Select a random notification ID\r",
											"    let randomIndex = Math.floor(Math.random() * notificationIds.length);\r",
											"    let selectedNotificationId = notificationIds[randomIndex];\r",
											"\r",
											"    // Store the randomly selected notification ID in an environment variable\r",
											"    pm.environment.set(\"selectedNotificationId\", selectedNotificationId);\r",
											"\r",
											"    console.log(\"Stored Notification IDs:\", notificationIds);\r",
											"    console.log(\"Randomly Selected Notification ID:\", selectedNotificationId);\r",
											"} else {\r",
											"    pm.test(\"Response contains at least one notification\", function () {\r",
											"        pm.expect(responseData.length).to.be.greaterThan(0);\r",
											"    });\r",
											"\r",
											"    console.error(\"No notifications found.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/notifications",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"notifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "get Notification Autorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate status code is 401 Unauthorized\r",
											"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Parse response body\r",
											"let responseJson = pm.response.json();\r",
											"\r",
											"// Validate response contains 'statusCode' and 'message'\r",
											"pm.test(\"Response contains correct error message\", function () {\r",
											"    pm.expect(responseJson).to.have.property(\"statusCode\", 401);\r",
											"    pm.expect(responseJson).to.have.property(\"message\", \"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token-user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/notifications",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"notifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch/read notification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains the correct properties\", function () {\r",
											"    let responseJson = pm.response.json();\r",
											"\r",
											"    pm.expect(responseJson).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"title\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"body\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"isRead\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseJson).to.have.property(\"isCleared\").that.is.a(\"boolean\");\r",
											"\r",
											"    // ‚úÖ Fixed: Use responseJson instead of notification\r",
											"    pm.expect(responseJson).to.have.property(\"link\");\r",
											"    pm.expect(responseJson.link).to.satisfy(value => value === null || typeof value === \"string\");\r",
											"\r",
											"    pm.expect(responseJson).to.have.property(\"data\");\r",
											"    pm.expect(responseJson.data).to.satisfy(value => value === null || typeof value === \"object\");\r",
											"\r",
											"    pm.expect(responseJson).to.have.property(\"type\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"// ‚úÖ Test if 'isRead' is updated to true\r",
											"pm.test(\"'isRead' status is updated to true\", function () {\r",
											"    let responseJson = pm.response.json();\r",
											"\r",
											"    pm.expect(responseJson.isRead).to.be.true;\r",
											"\r",
											"    // ‚úÖ Display \"Successfully Read\" in the console if isRead is true\r",
											"    if (responseJson.isRead) {\r",
											"        console.log(\"‚úÖ Successfully Read:\", responseJson.id);\r",
											"    }\r",
											"});\r",
											"\r",
											"// ‚úÖ Validate 'data' object and 'createdAt' timestamp\r",
											"pm.test(\"Validate 'data' object and 'createdAt' timestamp\", function () {\r",
											"    let responseJson = pm.response.json();\r",
											"\r",
											"    if (responseJson.data) {\r",
											"        pm.expect(responseJson.data).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(responseJson.data).to.have.property(\"title\").that.is.a(\"string\");\r",
											"    }\r",
											"\r",
											"    pm.expect(new Date(responseJson.createdAt).getTime()).to.be.a('number');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/notifications/{{selectedNotificationId}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"notifications",
										"{{selectedNotificationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch/read notification Autorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test Case 1: Status code check\r",
											"pm.test(\"Status code is 401 (Unauthorized)\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(401);\r",
											"});\r",
											"\r",
											"// Test Case 2: Validate the response body contains the correct statusCode, message, and property\r",
											"pm.test(\"Response body contains correct statusCode and message\", function () {\r",
											"    let responseJson = pm.response.json();\r",
											"\r",
											"    pm.expect(responseJson).to.have.property(\"statusCode\").that.equals(401);\r",
											"    pm.expect(responseJson).to.have.property(\"message\").that.equals(\"Unauthorized\");\r",
											"    //pm.expect(responseJson).to.have.property(\"property\").that.equals(\"Authentication\"); // Adjust as needed\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/notifications/{{notificationId}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"notifications",
										"{{notificationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Notification Setting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test Case 1: Status Code Check\r",
											"pm.test(\"Status code is 200 (OK)\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"// Test Case 2: Validate Response Body Properties\r",
											"pm.test(\"Response body contains correct properties\", function () {\r",
											"    let responseJson = pm.response.json();\r",
											"\r",
											"    pm.expect(responseJson).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"username\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"fullname\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"email\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"phoneNumber\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"gender\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"yearOfStudy\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"emailNotification\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseJson).to.have.property(\"appNotification\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseJson).to.have.property(\"status\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"universityId\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"deletedAt\").that.is.null;\r",
											"    pm.expect(responseJson).to.have.property(\"university\").that.is.an(\"object\");\r",
											"\r",
											"    // Validate nested university object\r",
											"    pm.expect(responseJson.university).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson.university).to.have.property(\"name\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"// Test Case 3: Verify Notification Settings when set to False for Email\r",
											"pm.test(\"Email notification is false and app notification is true\", function () {\r",
											"    let responseJson = pm.response.json();\r",
											"\r",
											"    // Validate emailNotification is false and appNotification is true\r",
											"    pm.expect(responseJson.emailNotification).to.eql(false);\r",
											"    pm.expect(responseJson.appNotification).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"emailNotification\": false,\r\n  \"appNotification\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/user",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Notification Setting Autorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate status code is 401 Unauthorized\r",
											"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Parse response body\r",
											"let responseJson = pm.response.json();\r",
											"\r",
											"// Validate response contains 'statusCode' and 'message'\r",
											"pm.test(\"Response contains correct error message\", function () {\r",
											"    pm.expect(responseJson).to.have.property(\"statusCode\", 401);\r",
											"    pm.expect(responseJson).to.have.property(\"message\", \"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"emailNotification\": true,\r\n  \"appNotification\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/user",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch/clear notification Autorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate status code is 401 Unauthorized\r",
											"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Parse response body\r",
											"let responseJson = pm.response.json();\r",
											"\r",
											"// Validate response contains 'statusCode' and 'message'\r",
											"pm.test(\"Response contains correct error message\", function () {\r",
											"    pm.expect(responseJson).to.have.property(\"statusCode\", 401);\r",
											"    pm.expect(responseJson).to.have.property(\"message\", \"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notificationIds\": [\r\n    \"9c94dcbc-3c17-4e4c-9771-633fdf8c44a4\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/notifications/clear",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"notifications",
										"clear"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"console.clear();\r",
					"// Automatically Log In and Store the Token for the User\r",
					"pm.sendRequest({\r",
					"    // url: 'http://localhost:3001/user-auth/login',  // Local Host login API\r",
					"    url: 'https://api.medquizet.com/user-auth/login',  // Deploy login API\r",
					"    method: 'POST',\r",
					"    header: {\r",
					"        'Content-Type': 'application/json'\r",
					"    },\r",
					"    body: {\r",
					"        mode: 'raw',\r",
					"        // raw: JSON.stringify({\r",
					"        //     usernameOrEmail: 'admin_12',  // Local Host rcredentials\r",
					"        //     password: 'pass'\r",
					"        // })\r",
					"        raw: JSON.stringify({\r",
					"            usernameOrEmail: 'Yidnek',  // Deploy  rcredentials\r",
					"            password: 'pass'\r",
					"        })\r",
					"\r",
					"        \r",
					"    }\r",
					"}, function (err, res) {\r",
					"    if (err) {\r",
					"        console.log(\"Auth Error:\", err);\r",
					"    } else {\r",
					"        console.log(\"Login Response:\", res.json());  // Log the full response\r",
					"        let token = res.json().accessToken;  // Adjust based on your API response\r",
					"\r",
					"        if (token) {\r",
					"             pm.collectionVariables.set(\"user_token\", token);  // Store it in Global Variables\r",
					"            console.log(\"Token Stored:\", token);  // Verify it is stored\r",
					"        } else {\r",
					"            console.log(\"‚ùå Token not found in response!\");\r",
					"        }\r",
					"       \r",
					"    }\r",
					"});\r",
					"\r",
					"// Automatically Log In and Store the Token for the admin\r",
					"pm.sendRequest({\r",
					"    // url: 'http://localhost:3001/auth/login',  // Local Host login API\r",
					"    url: 'https://api.medquizet.com/auth/login',  //Deploy login API\r",
					"    method: 'POST',\r",
					"    header: {\r",
					"        'Content-Type': 'application/json'\r",
					"    },\r",
					"    body: {\r",
					"        mode: 'raw',\r",
					"        raw: JSON.stringify({\r",
					"            usernameOrEmail: 'admin',  // Replace with your credentials\r",
					"            password: 'Pa$$w0rd##'\r",
					"        })\r",
					"    }\r",
					"}, function (err, res) {\r",
					"    if (err) {\r",
					"        console.log(\"Auth Error:\", err);\r",
					"    } else {\r",
					"        console.log(\"Login Response:\", res.json());  // Log the full response\r",
					"        let token = res.json().accessToken;  // Adjust based on your API response\r",
					"\r",
					"        if (token) {\r",
					"             pm.collectionVariables.set(\"admin_token\", token);  // Store it in Global Variables\r",
					"            console.log(\"Token Stored:\", token);  // Verify it is stored\r",
					"        } else {\r",
					"            console.log(\"‚ùå Token not found in response!\");\r",
					"        }\r",
					"       \r",
					"    }\r",
					"});\r",
					"\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "auth_token",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "base_URL",
			"value": "http://localhost:3001",
			"type": "string",
			"disabled": true
		},
		{
			"key": "user_token",
			"value": "ENTER A VALID API KEY"
		},
		{
			"key": "admin_token",
			"value": "ENTER A VALID API KEY"
		},
		{
			"key": "base_URL",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "base_URL",
			"value": "",
			"disabled": true
		},
		{
			"key": "base_URL",
			"value": ""
		}
	]
}