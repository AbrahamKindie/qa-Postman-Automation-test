{
	"info": {
		"_postman_id": "5332adaf-b839-40e9-986d-4d0cb94c8e94",
		"name": "Sprint-7-tests.postman_collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40492307",
		"_collection_link": "https://universal-water-798936.postman.co/workspace/9619d7ae-1df5-40cf-9e09-6922bd8b251a/collection/40492307-5332adaf-b839-40e9-986d-4d0cb94c8e94?action=share&source=collection_link&creator=40492307"
	},
	"item": [
		{
			"name": "Admin API",
			"item": [
				{
					"name": "Universities",
					"item": [
						{
							"name": "Get All University",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Store university IDs', function () {\r",
											"    let universityIds = [];\r",
											"    const data = pm.response.json().data;\r",
											"\r",
											"    data.forEach(univ => {\r",
											"        universityIds.push(univ.id);\r",
											"    });\r",
											"\r",
											"    pm.environment.set(\"universityIds\", JSON.stringify(universityIds)); // store as stringified array\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/university?page=1&itemsPerPage=10",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"university"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "itemsPerPage",
											"value": "10"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Institutions",
					"item": [
						{
							"name": "Get All Institutions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ===== Parse response once =====\r",
											"const responseData = pm.response.json();\r",
											"const institutions = responseData.data || [];\r",
											"\r",
											"// ===== Basic Response Validations =====\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response contains 'data' as a non-empty array\", function () {\r",
											"    pm.expect(institutions).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"// ===== JSON Schema Validation (for one item) =====\r",
											"pm.test(\"Institution object schema is valid\", function () {\r",
											"    const schema = {\r",
											"        type: \"object\",\r",
											"        required: [\"id\", \"name\", \"logo\", \"numOfStudents\", \"email\", \"phoneNumber\", \"plan\", \"billingCycle\", \"file\", \"status\", \"subscriptionStartDate\", \"subscriptionExpireDate\", \"createdAt\", \"updatedAt\", \"deletedAt\"],\r",
											"        properties: {\r",
											"            id: { type: \"string\" },\r",
											"            name: { type: \"string\" },\r",
											"            logo: { type: \"string\" },\r",
											"            numOfStudents: { type: \"number\" },\r",
											"            email: { type: \"string\" },\r",
											"            phoneNumber: { type: \"string\" },\r",
											"            plan: { type: \"string\" },\r",
											"            billingCycle: { type: \"string\" },\r",
											"            file: { type: \"string\" },\r",
											"            status: { type: \"boolean\" },\r",
											"            isExpired: { type: \"boolean\" },\r",
											"            subscriptionStartDate: { type: \"string\" },\r",
											"            subscriptionExpireDate: { type: \"string\" },\r",
											"            createdAt: { type: \"string\" },\r",
											"            updatedAt: { type: \"string\" },\r",
											"            deletedAt: { type: [\"string\", \"null\"] }\r",
											"        }\r",
											"    };\r",
											"    pm.expect(institutions[0]).to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"// ===== Field-Level Validations =====\r",
											"pm.test(\"Validate each institution's details\", () => {\r",
											"    const now = new Date();\r",
											"\r",
											"    institutions.forEach(institution => {\r",
											"        const {\r",
											"            name, numOfStudents, plan, billingCycle,\r",
											"            createdAt, subscriptionStartDate, subscriptionExpireDate, isExpired\r",
											"        } = institution;\r",
											"\r",
											"        // Basic fields\r",
											"        pm.expect(name).to.be.a(\"string\").and.not.empty;\r",
											"        pm.expect(numOfStudents).to.be.a(\"number\").and.above(0);\r",
											"        pm.expect(plan).to.be.oneOf([\"PREMIUM\", \"BASIC\"]);\r",
											"        pm.expect(billingCycle).to.be.oneOf([\"MONTHLY\", \"YEARLY\"]);\r",
											"\r",
											"        // Subscription timing\r",
											"     \r",
											"        const start = new Date(subscriptionStartDate);\r",
											"        const end = new Date(subscriptionExpireDate);\r",
											"\r",
											"\r",
											"        const expectedEnd = new Date(start);\r",
											"        if (billingCycle === \"MONTHLY\") {\r",
											"            expectedEnd.setMonth(expectedEnd.getMonth() + 1);\r",
											"        } else {\r",
											"            expectedEnd.setFullYear(expectedEnd.getFullYear() + 1);\r",
											"        }\r",
											"\r",
											"        pm.expect(Math.abs(end - expectedEnd)).to.be.below(5000);\r",
											"        pm.expect(isExpired).to.eql(end < now);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"// ===== Pagination Tests =====\r",
											"pm.test(\"Institution count is within per-page limit\", () => {\r",
											"    const itemsPerPage = 10;\r",
											"    pm.expect(institutions.length).to.be.at.most(itemsPerPage);\r",
											"});\r",
											"\r",
											"pm.test(\"Pagination metadata exists\", () => {\r",
											"    const pagination = responseData.payload?.pagination;\r",
											"    pm.expect(pagination).to.be.an('object');\r",
											"    [\"page\", \"itemsPerPage\", \"links\", \"total\", \"lastPage\", \"prev\", \"next\"].forEach(prop =>\r",
											"        pm.expect(pagination).to.have.property(prop)\r",
											"    );\r",
											"});\r",
											"\r",
											"// ===== Unauthorized Access Check =====\r",
											"if ([401, 403].includes(pm.response.code)) {\r",
											"    pm.test(\"Returns 401 or 403 for unauthorized user\", () => {\r",
											"        pm.expect(pm.response.code).to.be.oneOf([401, 403]);\r",
											"    });\r",
											"} else {\r",
											"    console.log(\"User is authorized — skipping unauthorized test.\");\r",
											"}\r",
											"\r",
											"// ===== Environment Variable Storage =====\r",
											"pm.test(\"Store Institution IDs and select one randomly\", () => {\r",
											"    const ids = institutions.map(i => i.id);\r",
											"    pm.environment.set(\"institutionIds\", JSON.stringify(ids));\r",
											"    const randomId = ids[Math.floor(Math.random() * ids.length)];\r",
											"    pm.environment.set(\"randominstitutionId\", randomId);\r",
											"});\r",
											"\r",
											"pm.test(\"Environment variables for IDs are valid\", () => {\r",
											"    const envIds = JSON.parse(pm.environment.get(\"institutionIds\") || \"[]\");\r",
											"    const randomId = pm.environment.get(\"randominstitutionId\");\r",
											"\r",
											"    pm.expect(envIds).to.include(randomId);\r",
											"    institutions.forEach(inst => {\r",
											"        pm.expect(envIds).to.include(inst.id);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/institutions?page=1&itemsPerPage=10",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"institutions"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "itemsPerPage",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Institution",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is valid JSON\", function () {\r",
											"    const schema = {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"id\": { \"type\": \"string\" },\r",
											"            \"name\": { \"type\": \"string\" },\r",
											"            \"logo\": { \"type\": \"string\" },\r",
											"            \"numOfStudents\": { \"type\": \"number\" },\r",
											"            \"email\": { \"type\": \"string\" },\r",
											"            \"phoneNumber\": { \"type\": \"string\" },\r",
											"            \"plan\": { \"type\": \"string\" },\r",
											"            \"billingCycle\": { \"type\": \"string\" },\r",
											"            \"file\": { \"type\": \"string\" },\r",
											"            \"status\": { \"type\": \"boolean\" },\r",
											"            \"subscriptionStartDate\": { \"type\": \"string\" },\r",
											"            \"subscriptionExpireDate\": { \"type\": \"string\" },\r",
											"            \"createdAt\": { \"type\": \"string\" },\r",
											"            \"updatedAt\": { \"type\": \"string\" },\r",
											"            \"deletedAt\": { \"type\": \"null\" }\r",
											"        }\r",
											"    };\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Store current status and related data in environment variables\", function () {\r",
											"    const response = pm.response.json();\r",
											"    const { status, plan, billingCycle, institutionUsers } = response.data;\r",
											"\r",
											"    pm.environment.set(\"currentStatus\", status);\r",
											"    pm.environment.set(\"currentPlan\", plan);\r",
											"    pm.environment.set(\"currentBillingCycle\", billingCycle);\r",
											"\r",
											"   \r",
											"    if (institutionUsers && Array.isArray(institutionUsers)) {\r",
											"        const institutionUserIds = institutionUsers.map(item => item.id);\r",
											"        pm.environment.set(\"institutionUsers\", JSON.stringify(institutionUserIds));\r",
											"\r",
											"        const randomIndex = Math.floor(Math.random() * institutionUserIds.length);\r",
											"        const randomInstitutionUserId = institutionUserIds[randomIndex];\r",
											"        pm.environment.set(\"randominstitutionUserId\", randomInstitutionUserId);\r",
											"    } else {\r",
											"        console.warn(\"institutionUsers is not an array or is missing.\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Institution metadata should be present\", function () {\r",
											"    const { data } = pm.response.json();\r",
											"    pm.expect(data).to.include.keys(\"name\", \"email\", \"phoneNumber\", \"numOfStudents\");\r",
											"});\r",
											"\r",
											"pm.test(\"Institution members should include valid active and eligible users\", function () {\r",
											"    const users = pm.response.json().data.institutionUsers;\r",
											"\r",
											"    users.forEach(member => {\r",
											"        pm.expect(member.isActive).to.be.true;\r",
											"        pm.expect(member.isEligibleToUse).to.be.true;\r",
											"        pm.expect(member.deletedAt).to.be.null;\r",
											"\r",
											"        const { user } = member;\r",
											"        pm.expect(user).to.include.keys(\"fullname\", \"email\", \"phoneNumber\", \"status\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Pagination info should be included in the payload\", function () {\r",
											"    const { pagination } = pm.response.json().payload;\r",
											"    pm.expect(pagination).to.include.keys(\"page\", \"itemsPerPage\", \"total\", \"lastPage\");\r",
											"});\r",
											"\r",
											"pm.test(\"Should return 401 or 403 for unauthorized user\", function () {\r",
											"    const statusCode = pm.response.code;\r",
											"    if ([401, 403].includes(statusCode)) {\r",
											"        pm.expect(statusCode).to.be.oneOf([401, 403]);\r",
											"    } else {\r",
											"        console.log(\"User is authorized — skipping unauthorized test.\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// Optional: Search functionality test (if applicable)\r",
											"// pm.test(\"Search by name should return correct institution\", function () {\r",
											"//     const searchQuery = pm.request.url.query.find(q => q.key === \"search\");\r",
											"//     if (searchQuery && searchQuery.value) {\r",
											"//         const institutionName = pm.response.json().data.name.toLowerCase();\r",
											"//         const searchName = searchQuery.value.toLowerCase();\r",
											"//         pm.expect(institutionName.includes(searchName)).to.be.true;\r",
											"//     } else {\r",
											"//         console.log(\"No search query parameter provided, skipping name match test.\");\r",
											"//     }\r",
											"// });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/institutions/{{randominstitutionId}}?page=1&itemsPerPage=10",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"institutions",
										"{{randominstitutionId}}"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "itemsPerPage",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Institution",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// ==== Generate Random Names ====\r",
											"const firstNames = ['Alice', 'Bob', 'Charlie', 'Diana', 'Edward'];\r",
											"const lastNames = ['Johnson', 'Smith', 'Lee', 'Brown', 'Wilson'];\r",
											"\r",
											"const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
											"const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"const fullName = `${firstName} ${lastName}`;\r",
											"\r",
											"pm.environment.set(\"userFullName\", fullName);\r",
											"\r",
											"// ==== Random Number for Uniqueness ====\r",
											"const timestamp = Date.now();  // Safer uniqueness than Math.random()\r",
											"const suffix = Math.floor(Math.random() * 9000 + 1000);  // For backup\r",
											"\r",
											"// ==== Email Generation ====\r",
											"const domain = 'meduniversity.edu';\r",
											"const userEmail = `${firstName.toLowerCase()}${timestamp}@medschool.edu`;\r",
											"const instituteEmail = `contact${suffix}@${domain}`;\r",
											"\r",
											"pm.environment.set(\"userEmail\", userEmail);\r",
											"pm.environment.set(\"instituteEmail\", instituteEmail);\r",
											"\r",
											"// ==== Unique Phone Numbers ====\r",
											"function getRandomPhone(prefixes) {\r",
											"    const baseNumber = Math.floor(10000000 + Math.random() * 90000000);  // 7-digit\r",
											"    const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];\r",
											"    return prefix + baseNumber;\r",
											"}\r",
											"\r",
											"const phonePrefixes = ['+2519', '+2517', '09', '07']; // Ethio & Safaricom\r",
											"const userPhone = getRandomPhone(phonePrefixes);\r",
											"const institutePhone = getRandomPhone(phonePrefixes);\r",
											"\r",
											"pm.environment.set(\"userPhone\", userPhone);\r",
											"pm.environment.set(\"institutePhone\", institutePhone);\r",
											"\r",
											"// ==== Unique Institution Name ====\r",
											"function getRandomLetters(length) {\r",
											"    const letters = 'abcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"const uniqueSuffix = getRandomLetters(4);\r",
											"pm.environment.set(\"instituteName\", `University of ${lastName}${uniqueSuffix}`);\r",
											"\r",
											"// ==== Random University ID ====\r",
											"try {\r",
											"    const universityIds = JSON.parse(pm.environment.get(\"universityIds\"));\r",
											"    if (Array.isArray(universityIds) && universityIds.length > 0) {\r",
											"        const randomIndex = Math.floor(Math.random() * universityIds.length);\r",
											"        const randomUniversityId = universityIds[randomIndex];\r",
											"        pm.environment.set(\"randomUniversityId\", randomUniversityId);\r",
											"    } else {\r",
											"        console.warn(\"⚠️ universityIds is not available or empty.\");\r",
											"    }\r",
											"} catch (e) {\r",
											"    console.error(\"❌ Failed to parse universityIds:\", e);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"// === 1. Status Code Check ===\r",
											"pm.test(\"Status code is 201 - Institution created successfully\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// === 2. Check JSON Schema ===\r",
											"pm.test(\"Response body is valid JSON according to schema\", function () {\r",
											"    const schema = {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"id\": { \"type\": \"string\" }, \r",
											"            \"name\": { \"type\": \"string\" },\r",
											"            \"logo\": { \"type\": \"string\" },\r",
											"            \"numOfStudents\": { \"type\": \"number\" },\r",
											"            \"email\": { \"type\": \"string\" },\r",
											"            \"phoneNumber\": { \"type\": \"string\" },\r",
											"            \"plan\": { \"type\": \"string\" },\r",
											"            \"billingCycle\": { \"type\": \"string\" },\r",
											"            \"file\": { \"type\": \"string\" },\r",
											"            \"status\": { \"type\": \"boolean\" },\r",
											"            \"subscriptionStartDate\": { \"type\": \"string\" },\r",
											"            \"subscriptionExpireDate\": { \"type\": \"string\" },\r",
											"            \"createdAt\": { \"type\": \"string\" },\r",
											"            \"updatedAt\": { \"type\": \"string\" },\r",
											"            \"deletedAt\": { \"type\": \"null\" }\r",
											"        }\r",
											"    };\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"// === 3. User Creation Response ===\r",
											"pm.test(\"User creation response based on status code\", function () {\r",
											"    const statusCode = pm.response.code;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    if (statusCode === 200 || statusCode === 201) {\r",
											"        pm.expect(jsonData).to.have.property(\"id\");\r",
											"    } else if (statusCode === 400) {\r",
											"        pm.expect(jsonData).to.have.property(\"message\");\r",
											"        const combinedMessage = jsonData.message.join(\" \");\r",
											"        pm.expect(combinedMessage).to.include(\"Duplicate user found\");\r",
											"        pm.expect(combinedMessage).to.include(\"already registered\");\r",
											"        pm.expect(combinedMessage).to.include(\"Max number of Students exceeded\");\r",
											"    } else if (statusCode === 409) {\r",
											"        pm.expect(jsonData.message).to.match(/duplicate|already exists/i);\r",
											"    } else {\r",
											"        throw new Error(`❌ Unexpected status code: ${statusCode}`);\r",
											"    }\r",
											"});\r",
											"\r",
											"// === 4. Response Structure Check ===\r",
											"pm.test(\"Response body has required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    const requiredFields = [\r",
											"        'id', 'name', 'logo', 'numOfStudents', 'email', 'phoneNumber', 'plan', \r",
											"        'billingCycle', 'file', 'status', 'subscriptionStartDate', \r",
											"        'subscriptionExpireDate', 'createdAt', 'updatedAt', 'deletedAt'\r",
											"    ];\r",
											"\r",
											"    requiredFields.forEach(field => {\r",
											"        pm.expect(responseData).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// === 5. Non-empty String Validation ===\r",
											"pm.test(\"Important fields are non-empty strings\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    const propertiesToCheck = [\r",
											"        \"id\", \"name\", \"logo\", \"email\", \"phoneNumber\", \"plan\", \"billingCycle\", \r",
											"        \"file\", \"subscriptionStartDate\", \"subscriptionExpireDate\", \"createdAt\", \"updatedAt\"\r",
											"    ];\r",
											"\r",
											"    propertiesToCheck.forEach(property => {\r",
											"        pm.expect(responseData[property]).to.be.a('string').and.to.have.lengthOf.at.least(1, `${property} should not be empty`);\r",
											"    });\r",
											"});\r",
											"\r",
											"// === 6. Num of Students Validation ===\r",
											"pm.test(\"Num of students is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.numOfStudents).to.be.a('number').and.to.satisfy(num => num >= 0, \"Num of students must be a non-negative integer\");\r",
											"});\r",
											"\r",
											"// === 7. Validate Email & Phone Format ===\r",
											"pm.test(\"Institution email is valid\", function () {\r",
											"    pm.expect(res.email).to.include(\"@\");\r",
											"});\r",
											"\r",
											"pm.test(\"Institution phone number is valid\", function () {\r",
											"    pm.expect(res.phoneNumber).to.match(/^(\\+251|0)[79]\\d{8}$/);\r",
											"});\r",
											"\r",
											"// === 8. User Data Validation (submitted user) ===\r",
											"pm.test(\"User data submitted is not missing required fields\", function () {\r",
											"    const user = pm.request.body.raw ? JSON.parse(pm.request.body.raw).users[0] : {};\r",
											"    pm.expect(user.fullname).to.not.be.empty;\r",
											"    pm.expect(user.email).to.include(\"@\");\r",
											"    pm.expect(user.phoneNumber).to.match(/^(\\+251|0)[79]\\d{8}$/);\r",
											"    pm.expect(user.gender).to.be.oneOf([\"MALE\", \"FEMALE\"]);\r",
											"    pm.expect(user.universityId).to.not.be.empty;\r",
											"});\r",
											"\r",
											"// === 9. Handle Failed Users (if partial success is allowed) ===\r",
											"pm.test(\"Failed users (if any) should contain valid error reasons\", function () {\r",
											"    if (res.failedUsers && res.failedUsers.length > 0) {\r",
											"        res.failedUsers.forEach(user => {\r",
											"            pm.expect(user).to.have.property(\"reason\");\r",
											"            console.warn(`⚠️ User creation failed: ${user.reason}`);\r",
											"        });\r",
											"    }\r",
											"});\r",
											"\r",
											"// === 10. Unauthorized Test (if token is missing or invalid) ===\r",
											"if (pm.response.code === 401 || pm.response.code === 403) {\r",
											"    console.error(\"❌ Unauthorized - Check your token or role permissions.\");\r",
											"    pm.test(\"Unauthorized request is blocked\", function () {\r",
											"        pm.expect(pm.response.code).to.be.oneOf([401, 403]);\r",
											"    });\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{instituteName}}\",\r\n  \"numOfStudents\": 1000,\r\n  \"email\": \"{{instituteEmail}}\",\r\n  \"phoneNumber\": \"{{institutePhone}}\",\r\n  \"plan\": \"PREMIUM\",\r\n  \"billingCycle\": \"MONTHLY\",\r\n  \"file\": \"string\",\r\n  \"users\": [\r\n    {\r\n      \"fullname\": \"{{userFullName}}\",\r\n      \"email\": \"{{userEmail}}\",\r\n      \"phoneNumber\": \"{{userPhone}}\",\r\n      \"gender\": \"FEMALE\",\r\n      \"profileImage\": \"alice.jpg\",\r\n      \"yearOfStudy\": \"PRE_CLINICAL_ONE\",\r\n      \"universityId\": \"{{randomUniversityId}}\"\r\n    }\r\n  ],\r\n  \"logo\": \"https://fastly.picsum.photos/id/557/200/300.jpg?hmac=eC86bsSOhqQjoHHnj3yzH5wMTIY9S3ys6cQjU1_QLGc\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/institutions",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"institutions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Duplicate Create Institution",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const firstNames = ['Alice', 'Bob', 'Charlie', 'Diana', 'Edward'];\r",
											"const lastNames = ['Johnson', 'Smith', 'Lee', 'Brown', 'Wilson'];\r",
											"\r",
											"const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
											"const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
											"const fullName = `${firstName} ${lastName}`;\r",
											"const randomNum = Math.floor(Math.random() * 9000 + 1000);\r",
											"const domain = 'meduniversity.edu';\r",
											"\r",
											"// Random institute name\r",
											"function getRandomLetters(length) {\r",
											"    const letters = 'abcdefghijklmnopqrstuvwxyz';\r",
											"    let result = '';\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += letters.charAt(Math.floor(Math.random() * letters.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"const suffix = getRandomLetters(4); // e.g., \"xydk\"\r",
											"pm.environment.set(\"instituteName\", `University of ${lastName}${suffix}`);\r",
											"\r",
											"\r",
											"// Random user fullname\r",
											"pm.environment.set(\"userFullName\", fullName);\r",
											"\r",
											"// Random emails\r",
											"pm.environment.set(\"userEmail\", `${firstName.toLowerCase()}${randomNum}@medschool.edu`);\r",
											"pm.environment.set(\"instituteEmail\", `contact${randomNum}@${domain}`);\r",
											"\r",
											"function getRandomPhone() {\r",
											"  const prefixes = ['+2519', '+2517', '09', '07']; // Ethio & Safaricom\r",
											"  const baseNumber = Math.floor(Math.random() * 90000000 + 10000000); // 7-digit number\r",
											"\r",
											"    const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];\r",
											"    \r",
											"    // Check the prefix to adjust the length of the phone number\r",
											"    if (prefix.startsWith('+')) {\r",
											"        return `${prefix}${baseNumber}`; // Ethio Telecom prefixes: 13 digits\r",
											"    } else {\r",
											"        return `${prefix}${baseNumber}`; // Safaricom prefixes: 10 digits\r",
											"    }\r",
											"}\r",
											"\r",
											"// Random phone numbers\r",
											"const phoneUser = getRandomPhone();\r",
											"const phoneInstitute = getRandomPhone();\r",
											"\r",
											"pm.environment.set(\"userPhone\", phoneUser);\r",
											"pm.environment.set(\"institutePhone\", phoneInstitute);\r",
											"\r",
											"\r",
											"let universityIds = JSON.parse(pm.environment.get(\"universityIds\")); // parse the stringified array\r",
											"\r",
											"if (Array.isArray(universityIds) && universityIds.length > 0) {\r",
											"    let randomIndex = Math.floor(Math.random() * universityIds.length);\r",
											"    let randomUniversityId = universityIds[randomIndex];\r",
											"    pm.environment.set(\"randomUniversityId\", randomUniversityId); // Save the randomly selected one\r",
											"} else {\r",
											"    console.warn(\"universityIds is not available or empty.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// === 1. Check for Duplicate User Creation ===\r",
											"pm.test(\"Should block duplicate user creation\", function () {\r",
											"    const statusCode = pm.response.code;\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(statusCode).to.eql(409);\r",
											"    pm.expect(jsonData).to.have.property(\"message\");\r",
											"\r",
											"    const messageText = jsonData.message;\r",
											"    const isDuplicateError = messageText.includes(\"student are already registered\") ||\r",
											"                             messageText.includes(\"institution with the specified email already exists\");\r",
											"\r",
											"    pm.expect(isDuplicateError).to.be.true;\r",
											"});\r",
											"\r",
											"// === 2. Response Status Code ===\r",
											"pm.test(\"Response status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"// === 3. Validate Response Structure ===\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('statusCode');\r",
											"    pm.expect(responseData).to.have.property('message');\r",
											"    pm.expect(responseData).to.have.property('property');\r",
											"});\r",
											"\r",
											"// === 4. Duplicate Email Check ===\r",
											"pm.test(\"Duplicate email check - User already registered\", function () {\r",
											"    const res = pm.response.json();\r",
											"\r",
											"    if (res.failedUsers && res.failedUsers.length > 0) {\r",
											"        res.failedUsers.forEach(user => {\r",
											"            if (user.reason === \"email already registered\") {\r",
											"                pm.expect(user.reason).to.equal(\"email already registered\");\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"});\r",
											"\r",
											"// === 5. Validate Email Uniqueness for New User ===\r",
											"pm.test(\"Email should be unique for non-duplicate users\", function () {\r",
											"    const user = pm.request.body.raw ? JSON.parse(pm.request.body.raw).users[0] : {};\r",
											"    \r",
											"    pm.expect(user.email).to.not.equal(pm.environment.get(\"userEmail\"), \"Duplicate email detected\");\r",
											"});\r",
											"\r",
											"// === 6. Temporary Password Generation for Valid Users ===\r",
											"const generateTempPassword = () => {\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()';\r",
											"    let password = '';\r",
											"    for (let i = 0; i < 8; i++) {\r",
											"        password += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return password;\r",
											"};\r",
											"\r",
											"// === 7. Create Temporary Password and Mock Email Sending ===\r",
											"pm.test(\"Generate Temporary Password and Mock Email for Active Users\", function () {\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    if (res && res.users && res.users.length > 0) {\r",
											"        res.users.forEach(user => {\r",
											"            if (user.status === \"ACTIVE\" && user.reason !== \"email already registered\") {\r",
											"                const tempPassword = generateTempPassword();\r",
											"                \r",
											"                pm.expect(tempPassword).to.have.lengthOf(8);  // Check password length\r",
											"                console.log(`Temporary password for ${user.email}: ${tempPassword}`);\r",
											"\r",
											"                // Mock sending email (replace with actual logic for email mock)\r",
											"                pm.expect(true).to.equal(true); // This would be replaced with actual email sending mock\r",
											"                console.log(`Email with credentials sent to ${user.email}: Temporary password is ${tempPassword}`);\r",
											"            }\r",
											"        });\r",
											"    }\r",
											"});\r",
											"\r",
											"// === 8. Validate Failed Users ===\r",
											"pm.test(\"Failed users (if any) should contain valid error reasons\", function () {\r",
											"    const res = pm.response.json();\r",
											"\r",
											"    if (res.failedUsers && res.failedUsers.length > 0) {\r",
											"        res.failedUsers.forEach(user => {\r",
											"            pm.expect(user).to.have.property(\"reason\");\r",
											"            console.warn(`⚠️ User creation failed: ${user.reason}`);\r",
											"        });\r",
											"    }\r",
											"});\r",
											"\r",
											"// === 9. Validate Error Response Structure ===\r",
											"pm.test(\"All errors include 'statusCode', 'message', and 'property'\", function () {\r",
											"    const res = pm.response.json();\r",
											"    \r",
											"    pm.expect(res).to.have.property(\"statusCode\");\r",
											"    pm.expect(res).to.have.property(\"message\");\r",
											"    pm.expect(res).to.have.property(\"property\");\r",
											"});\r",
											"\r",
											"// === 10. Validate Duplicate User Error Message ===\r",
											"pm.test(\"Message contains duplicate email and phone number info\", function () {\r",
											"    if (pm.response.code === 409) {\r",
											"        const res = pm.response.json();\r",
											"        pm.expect(res).to.have.property(\"message\");\r",
											"        pm.expect(res.message).to.include(\"already registered\");\r",
											"        pm.expect(res.message).to.match(/- .+@.+ \\(.+\\)/);  // Example: - yidne@gmail.com (0913124884)\r",
											"    }\r",
											"});\r",
											"\r",
											"// === 11. Validate the 'property' Field in Error Response ===\r",
											"pm.test(\"Error response includes 'property' set to 'institutionUser'\", function () {\r",
											"    if (pm.response.code === 409) {\r",
											"        const res = pm.response.json();\r",
											"        pm.expect(res.property).to.eql(\"institutionUser\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{instituteName}}\",\r\n  \"numOfStudents\": 1000,\r\n  \"email\": \"{{instituteEmail}}\",\r\n  \"phoneNumber\": \"{{institutePhone}}\",\r\n  \"plan\": \"PREMIUM\",\r\n  \"billingCycle\": \"MONTHLY\",\r\n  \"file\": \"string\",\r\n  \"users\": [\r\n  {\r\n    \"fullname\": \"Yidne Kassahun\",\r\n    \"email\": \"yidne@gmail.com\",\r\n    \"phoneNumber\": \"0913124884\",\r\n    \"gender\": \"FEMALE\",\r\n    \"profileImage\": \"alice.jpg\",\r\n    \"yearOfStudy\": \"PRE_CLINICAL_ONE\",\r\n    \"universityId\": \"{{randomUniversityId}}\"\r\n  }\r\n],\r\n  \"logo\": \"https://fastly.picsum.photos/id/557/200/300.jpg?hmac=eC86bsSOhqQjoHHnj3yzH5wMTIY9S3ys6cQjU1_QLGc\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/institutions",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"institutions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Institution Member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the correct Content-Type header\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.be.empty;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"users\": [\r\n    {\r\n      \"fullname\": \"{{userFullName}}\",\r\n      \"email\": \"{{userEmail}}\",\r\n      \"phoneNumber\": \"{{userPhone}}\",\r\n      \"gender\": \"FEMALE\",\r\n      \"profileImage\": \"alice.jpg\",\r\n      \"yearOfStudy\": \"PRE_CLINICAL_ONE\",\r\n      \"universityId\": \"{{randomUniversityId}}\"\r\n    }\r\n  ]\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/institutions/{{randominstitutionId}}/members",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"institutions",
										"{{randominstitutionId}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resend Institution Invitations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// === Basic Response Validations ===\r",
											"\r",
											"pm.test(\"Status code is 201\", () => {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is 'text/html'\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is not empty\", () => {\r",
											"    const body = pm.response.text();\r",
											"    pm.expect(body).to.be.a(\"string\").and.to.have.length.above(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains success message\", () => {\r",
											"    pm.expect(pm.response.text().toLowerCase()).to.include(\"email resend successfully\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/institutions/{{randominstitutionId}}/members/{{randominstitutionUserId}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"institutions",
										"{{randominstitutionId}}",
										"members",
										"{{randominstitutionUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upgrade Subscription Plan",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Dynamic values for subscription\r",
											"const numOfStudents = Math.floor(Math.random() * 2000 + 1000);  // Random students between 1000 and 3000\r",
											"const plans = ['BASIC', 'PREMIUM'];  // Available plans\r",
											"const billingCycles = ['MONTHLY', 'YEARLY'];  // Available billing cycles\r",
											"\r",
											"// Set numOfStudents\r",
											"pm.environment.set(\"numOfStudents\", numOfStudents);\r",
											"\r",
											"// Fetch current values from environment\r",
											"const currentPlan = pm.environment.get(\"currentPlan\");\r",
											"const currentBillingCycle = pm.environment.get(\"currentBillingCycle\");\r",
											"\r",
											"// Filter out the current values to get different ones\r",
											"const newPlans = plans.filter(plan => plan !== currentPlan);\r",
											"const newBillingCycles = billingCycles.filter(cycle => cycle !== currentBillingCycle);\r",
											"\r",
											"// Ensure we have fallback values if filtering results in empty array\r",
											"const newPlan = newPlans.length > 0 ? newPlans[Math.floor(Math.random() * newPlans.length)] : currentPlan;\r",
											"const newBillingCycle = newBillingCycles.length > 0 ? newBillingCycles[Math.floor(Math.random() * newBillingCycles.length)] : currentBillingCycle;\r",
											"\r",
											"// Set the updated values in environment\r",
											"pm.environment.set(\"plan\", newPlan);\r",
											"pm.environment.set(\"billingCycle\", newBillingCycle);\r",
											"\r",
											"// Optional: log to verify\r",
											"console.log(`New Plan: ${newPlan}, New Billing Cycle: ${newBillingCycle}, Num of Students: ${numOfStudents}`);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// === Define reusable constants once ===\r",
											"const res = pm.response.json();\r",
											"const users = pm.request.body ? JSON.parse(pm.request.body.raw).users : [];\r",
											"const expectedPlan = pm.environment.get(\"plan\");\r",
											"const expectedCycle = pm.environment.get(\"billingCycle\");\r",
											"const requiredFields = [\r",
											"    \"id\", \"name\", \"email\", \"phoneNumber\", \"numOfStudents\", \"plan\", \"billingCycle\", \r",
											"    \"subscriptionStartDate\", \"subscriptionExpireDate\", \"createdAt\", \"updatedAt\"\r",
											"];\r",
											"\r",
											"// === 1. Status Code Validation ===\r",
											"pm.test(\"Should return 200 OK on successful subscription upgrade\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// === 2. Subscription Data Validation ===\r",
											"pm.test(\"Check that the subscription is upgraded successfully\", function () {\r",
											"    pm.expect(res).to.have.property(\"numOfStudents\", Number(pm.environment.get(\"numOfStudents\")));\r",
											"    pm.expect(res.plan.toUpperCase()).to.eql(expectedPlan);\r",
											"    pm.expect(res.billingCycle.toUpperCase()).to.eql(expectedCycle);\r",
											"    // pm.expect(res.status).to.be.true;\r",
											"});\r",
											"\r",
											"// === 3. Error Handling ===\r",
											"pm.test(\"Check for error when user already exists\", function () {\r",
											"    if ([400, 409].includes(pm.response.code)) {\r",
											"        pm.expect(res.message).to.include(\"student are already registered\");\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check for invalid number of students\", function () {\r",
											"    if (pm.response.code === 400) {\r",
											"        pm.expect(res.message).to.include(\"Max number of Students exceed\");\r",
											"    }\r",
											"});\r",
											"\r",
											"// === 4. Headers Validation ===\r",
											"pm.test(\"Response has the Content-Type header set to application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Clean up environment variables\r",
											"pm.environment.unset(\"currentBillingCycle\");\r",
											"pm.environment.unset(\"statusToUpdate\");\r",
											"\r",
											"// === 5. Required Fields Validation ===\r",
											"pm.test(\"Response includes all required subscription fields\", function () {\r",
											"    requiredFields.forEach(field => pm.expect(res).to.have.property(field));\r",
											"});\r",
											"\r",
											"// === 6. Plan and Billing Cycle Updates ===\r",
											"pm.test(\"Plan and billing cycle are correctly updated\", function () {\r",
											"    pm.expect(res.plan).to.eql(expectedPlan);\r",
											"    pm.expect(res.billingCycle).to.eql(expectedCycle);\r",
											"});\r",
											"\r",
											"// === 7. Valid Date Format and Duration ===\r",
											"pm.test(\"Start and Expire dates are valid and duration is correct\", function () {\r",
											"    const start = new Date(res.subscriptionStartDate);\r",
											"    const end = new Date(res.subscriptionExpireDate);\r",
											"\r",
											"    pm.expect(start instanceof Date && !isNaN(start)).to.be.true;\r",
											"    pm.expect(end instanceof Date && !isNaN(end)).to.be.true;\r",
											"    pm.expect(end > start).to.be.true;\r",
											"\r",
											"    if (res.billingCycle === \"YEARLY\") {\r",
											"        const diffInDays = Math.round((end - start) / (1000 * 60 * 60 * 24));\r",
											"        pm.expect(diffInDays).to.be.within(364, 366);\r",
											"    }\r",
											"});\r",
											"\r",
											"// === 8. Validate Each User's Required Fields ===\r",
											"pm.test(\"Each user in upgrade has valid name, email, and phone\", function () {\r",
											"    users.forEach(user => {\r",
											"        pm.expect(user.fullname).to.be.a(\"string\").that.is.not.empty;\r",
											"        pm.expect(user.email).to.be.a(\"string\").that.includes(\"@\");\r",
											"        pm.expect(user.phoneNumber).to.be.a(\"string\").that.matches(/^\\+?\\d{9,15}|09\\d{8}$/);\r",
											"    });\r",
											"});\r",
											"\r",
											"// === 9. Verify Each User Processed Correctly ===\r",
											"pm.test(\"Each user should be associated with the institution and updated\", function () {\r",
											"    pm.expect(users.length).to.be.above(0);\r",
											"\r",
											"    users.forEach(user => {\r",
											"        pm.expect(user.fullname).to.be.a(\"string\").and.not.empty;\r",
											"        pm.expect(user.email).to.be.a(\"string\").and.includes(\"@\");\r",
											"        pm.expect(user.phoneNumber).to.be.a(\"string\").and.matches(/^\\+?\\d{9,15}|09\\d{8}$/);\r",
											"    });\r",
											"});\r",
											"\r",
											"// === 10. Temporary Password Generation ===\r",
											"pm.test(\"Temporary password should be generated for new users\", function () {\r",
											"    const newUserCreated = true; // Simulate this value from response if possible\r",
											"    pm.expect(newUserCreated).to.be.true;\r",
											"});\r",
											"\r",
											"// === 11. Subscription Dates Matching Institution-Level Subscription ===\r",
											"pm.test(\"Each user inherits institution subscription start and end dates\", function () {\r",
											"    const { subscriptionStartDate, subscriptionExpireDate } = res;\r",
											"    pm.expect(subscriptionStartDate).to.be.a(\"string\");\r",
											"    pm.expect(subscriptionExpireDate).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"// === 12. Welcome Email Verification ===\r",
											"pm.test(\"Welcome email sent to new users\", function () {\r",
											"    const emailSent = true; // Simulate this value from response if possible\r",
											"    pm.expect(emailSent).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"numOfStudents\": {{numOfStudents}},\r\n  \"plan\": \"{{plan}}\",\r\n  \"billingCycle\": \"{{billingCycle}}\",\r\n  \"users\": [\r\n    {\r\n      \"fullname\": \"{{userFullName}}\",\r\n      \"email\": \"{{userEmail}}\",\r\n      \"phoneNumber\": \"{{userPhone}}\",\r\n      \"gender\": \"FEMALE\",\r\n      \"profileImage\": \"alice.jpg\",\r\n      \"yearOfStudy\": \"PRE_CLINICAL_ONE\",\r\n      \"universityId\": \"{{randomUniversityId}}\"\r\n    }\r\n  ],\r\n  \"logo\": \"https://fastly.picsum.photos/id/557/200/300.jpg?hmac=eC86bsSOhqQjoHHnj3yzH5wMTIY9S3ys6cQjU1_QLGc\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/institutions/{{randominstitutionId}}/plan",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"institutions",
										"{{randominstitutionId}}",
										"plan"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Institution Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const currentStatus = pm.environment.get(\"currentStatus\");\r",
											"const institutionId = pm.environment.get(\"randominstitutionId\");  // Fetch the random institution ID\r",
											"const originalExpireDate = pm.environment.get(\"originalSubscriptionExpireDate\");\r",
											"\r",
											"// Toggle the status: if it's false, set it to true, if it's true, set it to false\r",
											"if (currentStatus === false) {\r",
											"    console.log(`Institution with ID ${institutionId} is currently inactive. Changing status to true.`);\r",
											"    pm.environment.set(\"statusToUpdate\", true);  // Set to true, as we are changing it to true\r",
											"} else {\r",
											"    console.log(`Institution with ID ${institutionId} is currently active. Changing status to false.`);\r",
											"    pm.environment.set(\"statusToUpdate\", false);  // Set to false, as we are changing it to false\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const statusToUpdate = pm.environment.get(\"statusToUpdate\");\r",
											"const toggledStatus = statusToUpdate === true;\r",
											"const institutionId = pm.environment.get(\"randominstitutionId\");\r",
											"const response = pm.response.json();\r",
											"\r",
											"// ✅ Status Code Test\r",
											"pm.test(\"Status code is 200 or 201\", () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
											"});\r",
											"\r",
											"// ✅ Content-Type Header Test\r",
											"pm.test(\"Content-Type is application/json\", () => {\r",
											"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
											"    pm.expect(contentType).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// ✅ Response Format\r",
											"pm.test(\"Response is a valid JSON object\", () => {\r",
											"    pm.expect(response).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// ✅ Required Fields Test\r",
											"pm.test(\"Response contains all required fields\", () => {\r",
											"    const expectedFields = [\r",
											"        \"id\", \"name\", \"logo\", \"numOfStudents\", \"email\", \"phoneNumber\", \"plan\",\r",
											"        \"billingCycle\", \"file\", \"status\", \"subscriptionStartDate\", \r",
											"        \"subscriptionExpireDate\", \"createdAt\", \"updatedAt\", \"deletedAt\"\r",
											"    ];\r",
											"    expectedFields.forEach(field => {\r",
											"        pm.expect(response).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"// ✅ Correct Institution ID Returned\r",
											"pm.test(\"Returned institution ID matches the requested ID\", () => {\r",
											"    pm.expect(response.id).to.equal(institutionId);\r",
											"});\r",
											"\r",
											"// ✅ Status Change Verification\r",
											"pm.test(`Institution status is updated to: ${toggledStatus}`, () => {\r",
											"    pm.expect(response.status).to.equal(toggledStatus);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// ✅ Authorization Token Validation\r",
											"pm.test(\"Admin token exists and is valid\", () => {\r",
											"    const token = pm.environment.get(\"admin_token\");\r",
											"    pm.expect(token).to.be.a(\"string\").and.to.have.length.greaterThan(10);\r",
											"});\r",
											"\r",
											"// ✅ Logging confirmation\r",
											"console.log(`✅ Institution ID ${institutionId} status changed to ${toggledStatus ? 'Active' : 'Inactive'}`);\r",
											"\r",
											"// ✅ Cleanup environment variables\r",
											"pm.environment.unset(\"currentStatus\");\r",
											"pm.environment.unset(\"statusToUpdate\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": {{statusToUpdate}}\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/institutions/{{randominstitutionId}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"institutions",
										"{{randominstitutionId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// === Define Constants ===\r",
											"// const baseURL = \"http://localhost:3001\";  // Local Host URL\r",
											"const baseURL = \"https://api.medquizet.com\";  // Deployed URL\r",
											"const authToken = pm.environment.get(\"admin_token\");\r",
											"const randomInstitutionId = pm.environment.get(\"randominstitutionId\");\r",
											"const deletedInstitutionUserId = pm.environment.get(\"randominstitutionUserId\");\r",
											"\r",
											"// === Basic Status Code Test ===\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// === Check if Content-Type is HTML ===\r",
											"pm.test(\"Content-Type header is 'text/html'\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
											"});\r",
											"\r",
											"// === Ensure Response Body is a Non-Empty String ===\r",
											"pm.test(\"Response body is a non-empty string\", function () {\r",
											"    const responseBody = pm.response.text();\r",
											"    pm.expect(responseBody).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Response body should not be empty\");\r",
											"});\r",
											"\r",
											"// === Validate Deleted Institution ID ===\r",
											"pm.test(\"Deleted institution user ID is no longer present\", function () {\r",
											"    pm.sendRequest({\r",
											"        url: `${baseURL}/institutions/${randomInstitutionId}?page=1&itemsPerPage=10`,\r",
											"        method: \"GET\",\r",
											"        header: {\r",
											"            \"Authorization\": `Bearer ${authToken}`,\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"        if (err) {\r",
											"            console.log(\"❌ Failed to fetch updated institution list:\", err);\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        const responseData = res.json();\r",
											"        if (!responseData || !Array.isArray(responseData.data.institutionUsers)) {\r",
											"            return console.log(\"⚠️ No institutions found in the response.\");\r",
											"        }\r",
											"\r",
											"        const remainingInstitutionUsersIds = responseData.data.institutionUsers\r",
											"            .filter(item => item && item.id !== deletedInstitutionUserId)\r",
											"            .map(item => item.id);\r",
											"\r",
											"        // Assert the deleted ID is not found in the list\r",
											"        pm.expect(remainingInstitutionUsersIds).to.not.include(deletedInstitutionUserId, `Deleted ID (${deletedInstitutionUserId}) is still present`);\r",
											"\r",
											"        // Save valid institution IDs for later use\r",
											"        pm.environment.set(\"validInstitutionUsersIds\", JSON.stringify(remainingInstitutionUsersIds));\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/institutions/{{randominstitutionId}}/members/{{randominstitutionUserId}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"institutions",
										"{{randominstitutionId}}",
										"members",
										"{{randominstitutionUserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Institution",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// === Define Constants ===\r",
											"// const baseURL = \"http://localhost:3001\";  // Local Host URL\r",
											"const baseURL = \"https://api.medquizet.com\";  // Deployed URL\r",
											"const authToken = pm.environment.get(\"admin_token\");\r",
											"const deletedInstitutionId = pm.environment.get(\"randominstitutionId\");\r",
											"\r",
											"// === Basic Tests ===\r",
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
											"\r",
											"pm.test(\"Content-Type header is 'text/html'\", () => {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is a non-empty string\", () => {\r",
											"    const responseBody = pm.response.text();\r",
											"    pm.expect(responseBody).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Response body should not be empty\");\r",
											"});\r",
											"\r",
											"// === Test Deleted Institution ID ===\r",
											"pm.test(\"Deleted institution ID is no longer present and update institution IDs\", () => {\r",
											"    pm.sendRequest({\r",
											"        url: `${baseURL}/institutions?page=1&itemsPerPage=10`,\r",
											"        method: \"GET\",\r",
											"        header: {\r",
											"            \"Authorization\": `Bearer ${authToken}`,\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        }\r",
											"    }, (err, res) => {\r",
											"        if (err) {\r",
											"            console.log(\"❌ Failed to fetch updated institution list:\", err);\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        const responseData = res.json();\r",
											"        if (!responseData || !Array.isArray(responseData.data)) {\r",
											"            console.log(\"⚠️ No institutions found in the response.\");\r",
											"            return;\r",
											"        }\r",
											"\r",
											"        // Filter and collect remaining institution IDs\r",
											"        const remainingInstitutionIds = responseData.data\r",
											"            .filter(item => item && item.id !== deletedInstitutionId)\r",
											"            .map(item => item.id);\r",
											"\r",
											"        // Assert that the deleted ID is not present\r",
											"        pm.expect(remainingInstitutionIds).to.not.include(deletedInstitutionId, `Deleted ID (${deletedInstitutionId}) is still present`);\r",
											"\r",
											"        // Save valid institution IDs for later use\r",
											"        pm.environment.set(\"validInstitutionIds\", JSON.stringify(remainingInstitutionIds));\r",
											"      \r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/institutions/{{randominstitutionId}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"institutions",
										"{{randominstitutionId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Contact_Us",
					"item": [
						{
							"name": "Create_feedBack",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"// ✅ Check if email exists and is a valid format\r",
											"pm.test(\"Email should be a valid format and not empty\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"    pm.expect(jsonData.email).to.be.a(\"string\").and.not.empty;\r",
											"\r",
											"    // Regex for basic email validation\r",
											"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
											"    pm.expect(jsonData.email).to.match(emailRegex);\r",
											"});\r",
											"\r",
											"// ✅ Check if phone exists and is a valid format (basic validation)\r",
											"pm.test(\"Phone number should be valid and not empty\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"phone\");\r",
											"    pm.expect(jsonData.phone).to.be.a(\"string\").and.not.empty;\r",
											"\r",
											"    // Simple phone regex (adjust for specific country format if needed)\r",
											"    const phoneRegex = /^(?:\\+2519\\d{8}|09\\d{8})$/;\r",
											"    pm.expect(jsonData.phone).to.match(phoneRegex);\r",
											"});\r",
											"\r",
											"// ✅ Check if subject is valid (one of the allowed values, case-insensitive)\r",
											"pm.test(\"Subject must be one of the allowed values\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"subject\");\r",
											"\r",
											"    const allowedSubjects = [\"FEEDBACK\", \"JOIN_OUR_TEAM\", \"WORK_WITH_US\", \"REPORT\", \"OTHER\"];\r",
											"    pm.expect(allowedSubjects).to.include(jsonData.subject.toUpperCase());\r",
											"});\r",
											"\r",
											"// Validate UUID format for 'id'\r",
											"pm.test(\"ID is in UUID format\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\r",
											"    pm.expect(jsonData.id).to.match(uuidRegex);\r",
											"});\r",
											"\r",
											"// Validate 'createdAt' and 'updatedAt' timestamps\r",
											"pm.test(\"CreatedAt and UpdatedAt are valid ISO timestamps\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    const isoDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
											"    pm.expect(jsonData.createdAt).to.match(isoDateRegex);\r",
											"    pm.expect(jsonData.updatedAt).to.match(isoDateRegex);\r",
											"});\r",
											"\r",
											"// ✅ Response body contains expected fields\r",
											"pm.test(\"Response body contains expected fields\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"fullName\", \"yidnek test\");\r",
											"    pm.expect(jsonData).to.have.property(\"email\", \"Yidnek@example.com\");\r",
											"    pm.expect(jsonData).to.have.property(\"phone\", \"+251966453734\");\r",
											"    pm.expect(jsonData).to.have.property(\"subject\", \"WORK_WITH_US\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\", \"I would like to know more about your services.\");\r",
											"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
											"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
											"    pm.expect(jsonData.deletedAt).to.be.null;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"yidnek test\",\r\n  \"email\": \"Yidnek@example.com\",\r\n  \"phone\": \"+251966453734\",\r\n  \"subject\": \"WORK_WITH_US\",\r\n  \"message\": \"I would like to know more about your services.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/contact",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get FeedBack",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Parse the response body to JSON\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"// Ensure that data is an array and contains items\r",
											"pm.test(\"Response body should be an array with data\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Test to check if each item in the array contains the expected properties\r",
											"jsonData.forEach(function (item) {\r",
											"    pm.test(\"Each item should have (id, fullname,email, phone subject, message, CreatedAt and UpdatedAt) properties\", function () {\r",
											"        pm.expect(item).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"fullName\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"email\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"phone\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"subject\").that.is.a(\"string\");\r",
											"        pm.expect(item.message === null || typeof item.message === \"string\").to.be.true;\r",
											"        pm.expect(item).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
											"        pm.expect(item.deletedAt === null || typeof item.deletedAt === \"string\").to.be.true;\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/contact",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check-UnAutorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check if response status is 401 (Unauthorized)\r",
											"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Check if response contains the correct message for Unauthorized access\r",
											"pm.test(\"Response body contains Unauthorized message\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/contact",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"contact"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{admin_token}}",
						"type": "string"
					}
				]
			}
		},
		{
			"name": "User API",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"console.clear();\r",
					"\r",
					"function login(role, url, credentials, tokenKey) {\r",
					"    return new Promise((resolve, reject) => {\r",
					"        pm.sendRequest({\r",
					"            url: url,\r",
					"            method: 'POST',\r",
					"            header: { 'Content-Type': 'application/json' },\r",
					"            body: {\r",
					"                mode: 'raw',\r",
					"                raw: JSON.stringify(credentials)\r",
					"            }\r",
					"        }, function (err, res) {\r",
					"            if (err) {\r",
					"                console.log(`❌ ${role} login error:`, err);\r",
					"                reject(err);\r",
					"            } else {\r",
					"                const token = res.json().accessToken;\r",
					"                if (token) {\r",
					"                    pm.environment.set(tokenKey, token);\r",
					"                    console.log(`✅ ${role} token stored`);\r",
					"                    resolve();\r",
					"                } else {\r",
					"                    reject(`❌ Token not found for ${role}`);\r",
					"                }\r",
					"            }\r",
					"        });\r",
					"    });\r",
					"}\r",
					"\r",
					"// Run login once before iterations\r",
					"Promise.all([\r",
					"    login(\"user\", \"https://api.medquizet.com/user-auth/login\", {\r",
					"        usernameOrEmail: \"Yidnek\",\r",
					"        password: \"pass\"\r",
					"    }, \"user_token\"),\r",
					"    login(\"admin\", \"https://api.medquizet.com/auth/login\", {\r",
					"        //  login(\"admin\", \"http://localhost:3001/auth/login\", {\r",
					"        usernameOrEmail: \"admin\",\r",
					"        password: \"Pa$$w0rd##\"\r",
					"    }, \"admin_token\")\r",
					"]).then(() => {\r",
					"    console.log(\"✅ All tokens set before run\");\r",
					"}).catch(err => {\r",
					"    console.log(\"❌ Error setting tokens:\", err);\r",
					"});\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}