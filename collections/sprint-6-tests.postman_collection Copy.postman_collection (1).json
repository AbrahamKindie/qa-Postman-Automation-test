{
	"info": {
		"_postman_id": "d343d717-7fd9-4af8-8218-1dff391eca30",
		"name": "sprint-6-tests.postman_collection Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40492307"
	},
	"item": [
		{
			"name": "Admin API",
			"item": []
		},
		{
			"name": "Shared Endpoints",
			"item": [
				{
					"name": "Notifications",
					"item": [
						{
							"name": "get Notification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"let responseData = pm.response.json(); // Parse the response JSON\r",
											"\r",
											"// Ensure the response is an array\r",
											"pm.test(\"Response should be an array\", function () {\r",
											"    pm.expect(responseData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"if (Array.isArray(responseData) && responseData.length > 0) {\r",
											"    let notificationIds = []; // Array to store all notification IDs\r",
											"\r",
											"    responseData.forEach((notification, index) => {\r",
											"        pm.test(`Notification ${index + 1} has required fields`, function () {\r",
											"            pm.expect(notification).to.have.property(\"id\").that.is.a(\"string\");\r",
											"            pm.expect(notification).to.have.property(\"title\").that.is.a(\"string\");\r",
											"            pm.expect(notification).to.have.property(\"body\").that.is.a(\"string\");\r",
											"            pm.expect(notification).to.have.property(\"isRead\").that.is.a(\"boolean\");\r",
											"            pm.expect(notification).to.have.property(\"isCleared\").that.is.a(\"boolean\");\r",
											"\r",
											"            pm.expect(notification).to.have.property(\"link\");\r",
											"            pm.expect(notification.link).to.satisfy(value => value === null || typeof value === \"string\");\r",
											"\r",
											"            pm.expect(notification).to.have.property(\"type\").that.is.a(\"string\");\r",
											"\r",
											"            pm.expect(notification).to.have.property(\"data\");\r",
											"            pm.expect(notification.data).to.satisfy(value => value === null || typeof value === \"object\");\r",
											"\r",
											"            pm.expect(notification).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
											"\r",
											"            // Validate createdAt is a valid date\r",
											"            pm.test(`Notification ${index + 1} has a valid createdAt`, function () {\r",
											"                let createdAt = new Date(notification.createdAt);\r",
											"                pm.expect(createdAt.toString()).to.not.eql(\"Invalid Date\");\r",
											"            });\r",
											"        });\r",
											"\r",
											"        // Add notification ID to the array\r",
											"        notificationIds.push(notification.id);\r",
											"    });\r",
											"\r",
											"    // Store all notification IDs as a JSON string in the environment\r",
											"    pm.environment.set(\"notificationIds\", JSON.stringify(notificationIds));\r",
											"\r",
											"    // Select a random notification ID\r",
											"    let randomIndex = Math.floor(Math.random() * notificationIds.length);\r",
											"    let selectedNotificationId = notificationIds[randomIndex];\r",
											"\r",
											"    // Store the randomly selected notification ID in an environment variable\r",
											"    pm.environment.set(\"selectedNotificationId\", selectedNotificationId);\r",
											"\r",
											"    console.log(\"Stored Notification IDs:\", notificationIds);\r",
											"    console.log(\"Randomly Selected Notification ID:\", selectedNotificationId);\r",
											"} else {\r",
											"    pm.test(\"Response contains at least one notification\", function () {\r",
											"        pm.expect(responseData.length).to.be.greaterThan(0);\r",
											"    });\r",
											"\r",
											"    console.error(\"No notifications found.\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/notifications",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"notifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "get Notification Autorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate status code is 401 Unauthorized\r",
											"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Parse response body\r",
											"let responseJson = pm.response.json();\r",
											"\r",
											"// Validate response contains 'statusCode' and 'message'\r",
											"pm.test(\"Response contains correct error message\", function () {\r",
											"    pm.expect(responseJson).to.have.property(\"statusCode\", 401);\r",
											"    pm.expect(responseJson).to.have.property(\"message\", \"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token-user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/notifications",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"notifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch/read notification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains the correct properties\", function () {\r",
											"    let responseJson = pm.response.json();\r",
											"\r",
											"    pm.expect(responseJson).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"title\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"body\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"isRead\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseJson).to.have.property(\"isCleared\").that.is.a(\"boolean\");\r",
											"\r",
											"    // ✅ Fixed: Use responseJson instead of notification\r",
											"    pm.expect(responseJson).to.have.property(\"link\");\r",
											"    pm.expect(responseJson.link).to.satisfy(value => value === null || typeof value === \"string\");\r",
											"\r",
											"    pm.expect(responseJson).to.have.property(\"data\");\r",
											"    pm.expect(responseJson.data).to.satisfy(value => value === null || typeof value === \"object\");\r",
											"\r",
											"    pm.expect(responseJson).to.have.property(\"type\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"// ✅ Test if 'isRead' is updated to true\r",
											"pm.test(\"'isRead' status is updated to true\", function () {\r",
											"    let responseJson = pm.response.json();\r",
											"\r",
											"    pm.expect(responseJson.isRead).to.be.true;\r",
											"\r",
											"    // ✅ Display \"Successfully Read\" in the console if isRead is true\r",
											"    if (responseJson.isRead) {\r",
											"        console.log(\"✅ Successfully Read:\", responseJson.id);\r",
											"    }\r",
											"});\r",
											"\r",
											"// ✅ Validate 'data' object and 'createdAt' timestamp\r",
											"pm.test(\"Validate 'data' object and 'createdAt' timestamp\", function () {\r",
											"    let responseJson = pm.response.json();\r",
											"\r",
											"    if (responseJson.data) {\r",
											"        pm.expect(responseJson.data).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(responseJson.data).to.have.property(\"title\").that.is.a(\"string\");\r",
											"    }\r",
											"\r",
											"    pm.expect(new Date(responseJson.createdAt).getTime()).to.be.a('number');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/notifications/{{selectedNotificationId}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"notifications",
										"{{selectedNotificationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch/read notification Autorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test Case 1: Status code check\r",
											"pm.test(\"Status code is 401 (Unauthorized)\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(401);\r",
											"});\r",
											"\r",
											"// Test Case 2: Validate the response body contains the correct statusCode, message, and property\r",
											"pm.test(\"Response body contains correct statusCode and message\", function () {\r",
											"    let responseJson = pm.response.json();\r",
											"\r",
											"    pm.expect(responseJson).to.have.property(\"statusCode\").that.equals(401);\r",
											"    pm.expect(responseJson).to.have.property(\"message\").that.equals(\"Unauthorized\");\r",
											"    //pm.expect(responseJson).to.have.property(\"property\").that.equals(\"Authentication\"); // Adjust as needed\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/notifications/{{notificationId}}",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"notifications",
										"{{notificationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Notification Setting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test Case 1: Status Code Check\r",
											"pm.test(\"Status code is 200 (OK)\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"// Test Case 2: Validate Response Body Properties\r",
											"pm.test(\"Response body contains correct properties\", function () {\r",
											"    let responseJson = pm.response.json();\r",
											"\r",
											"    pm.expect(responseJson).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"username\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"fullname\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"email\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"phoneNumber\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"gender\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"yearOfStudy\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"emailNotification\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseJson).to.have.property(\"appNotification\").that.is.a(\"boolean\");\r",
											"    pm.expect(responseJson).to.have.property(\"status\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"universityId\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson).to.have.property(\"deletedAt\").that.is.null;\r",
											"    pm.expect(responseJson).to.have.property(\"university\").that.is.an(\"object\");\r",
											"\r",
											"    // Validate nested university object\r",
											"    pm.expect(responseJson.university).to.have.property(\"id\").that.is.a(\"string\");\r",
											"    pm.expect(responseJson.university).to.have.property(\"name\").that.is.a(\"string\");\r",
											"});\r",
											"\r",
											"// Test Case 3: Verify Notification Settings when set to False for Email\r",
											"pm.test(\"Email notification is false and app notification is true\", function () {\r",
											"    let responseJson = pm.response.json();\r",
											"\r",
											"    // Validate emailNotification is false and appNotification is true\r",
											"    pm.expect(responseJson.emailNotification).to.eql(false);\r",
											"    pm.expect(responseJson.appNotification).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"emailNotification\": false,\r\n  \"appNotification\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/user",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Notification Setting Autorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate status code is 401 Unauthorized\r",
											"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Parse response body\r",
											"let responseJson = pm.response.json();\r",
											"\r",
											"// Validate response contains 'statusCode' and 'message'\r",
											"pm.test(\"Response contains correct error message\", function () {\r",
											"    pm.expect(responseJson).to.have.property(\"statusCode\", 401);\r",
											"    pm.expect(responseJson).to.have.property(\"message\", \"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"emailNotification\": true,\r\n  \"appNotification\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/user",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch/clear notification Autorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate status code is 401 Unauthorized\r",
											"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Parse response body\r",
											"let responseJson = pm.response.json();\r",
											"\r",
											"// Validate response contains 'statusCode' and 'message'\r",
											"pm.test(\"Response contains correct error message\", function () {\r",
											"    pm.expect(responseJson).to.have.property(\"statusCode\", 401);\r",
											"    pm.expect(responseJson).to.have.property(\"message\", \"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notificationIds\": [\r\n    \"9c94dcbc-3c17-4e4c-9771-633fdf8c44a4\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/notifications/clear",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"notifications",
										"clear"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"console.clear();\r",
					"// Automatically Log In and Store the Token for the User\r",
					"pm.sendRequest({\r",
					"    // url: 'http://localhost:3001/user-auth/login',  // Local Host login API\r",
					"    url: 'https://api.medquizet.com/user-auth/login',  // Deploy login API\r",
					"    method: 'POST',\r",
					"    header: {\r",
					"        'Content-Type': 'application/json'\r",
					"    },\r",
					"    body: {\r",
					"        mode: 'raw',\r",
					"        // raw: JSON.stringify({\r",
					"        //     usernameOrEmail: 'admin_12',  // Local Host rcredentials\r",
					"        //     password: 'pass'\r",
					"        // })\r",
					"        raw: JSON.stringify({\r",
					"            usernameOrEmail: 'Yidnek',  // Deploy  rcredentials\r",
					"            password: 'pass'\r",
					"        })\r",
					"\r",
					"        \r",
					"    }\r",
					"}, function (err, res) {\r",
					"    if (err) {\r",
					"        console.log(\"Auth Error:\", err);\r",
					"    } else {\r",
					"        console.log(\"Login Response:\", res.json());  // Log the full response\r",
					"        let token = res.json().accessToken;  // Adjust based on your API response\r",
					"\r",
					"        if (token) {\r",
					"             pm.collectionVariables.set(\"user_token\", token);  // Store it in Global Variables\r",
					"            console.log(\"Token Stored:\", token);  // Verify it is stored\r",
					"        } else {\r",
					"            console.log(\"❌ Token not found in response!\");\r",
					"        }\r",
					"       \r",
					"    }\r",
					"});\r",
					"\r",
					"// Automatically Log In and Store the Token for the admin\r",
					"pm.sendRequest({\r",
					"    // url: 'http://localhost:3001/auth/login',  // Local Host login API\r",
					"    url: 'https://api.medquizet.com/auth/login',  //Deploy login API\r",
					"    method: 'POST',\r",
					"    header: {\r",
					"        'Content-Type': 'application/json'\r",
					"    },\r",
					"    body: {\r",
					"        mode: 'raw',\r",
					"        raw: JSON.stringify({\r",
					"            usernameOrEmail: 'admin',  // Replace with your credentials\r",
					"            password: 'Pa$$w0rd##'\r",
					"        })\r",
					"    }\r",
					"}, function (err, res) {\r",
					"    if (err) {\r",
					"        console.log(\"Auth Error:\", err);\r",
					"    } else {\r",
					"        console.log(\"Login Response:\", res.json());  // Log the full response\r",
					"        let token = res.json().accessToken;  // Adjust based on your API response\r",
					"\r",
					"        if (token) {\r",
					"             pm.collectionVariables.set(\"admin_token\", token);  // Store it in Global Variables\r",
					"            console.log(\"Token Stored:\", token);  // Verify it is stored\r",
					"        } else {\r",
					"            console.log(\"❌ Token not found in response!\");\r",
					"        }\r",
					"       \r",
					"    }\r",
					"});\r",
					"\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "auth_token",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "base_URL",
			"value": "http://localhost:3001",
			"type": "string",
			"disabled": true
		},
		{
			"key": "user_token",
			"value": "ENTER A VALID API KEY"
		},
		{
			"key": "admin_token",
			"value": "ENTER A VALID API KEY"
		},
		{
			"key": "base_URL",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "base_URL",
			"value": "",
			"disabled": true
		},
		{
			"key": "base_URL",
			"value": ""
		}
	]
}