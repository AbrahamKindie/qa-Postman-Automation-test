{
	"info": {
		"_postman_id": "b79892be-92ee-4b94-8148-2922d8ff23f0",
		"name": "Sprint-7-tests.postman_collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40492307"
	},
	"item": [
		{
			"name": "Admin API",
			"item": [
				{
					"name": "Contact_Us",
					"item": [
						{
							"name": "Create_feedBack",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"// ✅ Check if email exists and is a valid format\r",
											"pm.test(\"Email should be a valid format and not empty\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"    pm.expect(jsonData.email).to.be.a(\"string\").and.not.empty;\r",
											"\r",
											"    // Regex for basic email validation\r",
											"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
											"    pm.expect(jsonData.email).to.match(emailRegex);\r",
											"});\r",
											"\r",
											"// ✅ Check if phone exists and is a valid format (basic validation)\r",
											"pm.test(\"Phone number should be valid and not empty\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"phone\");\r",
											"    pm.expect(jsonData.phone).to.be.a(\"string\").and.not.empty;\r",
											"\r",
											"    // Simple phone regex (adjust for specific country format if needed)\r",
											"    const phoneRegex = /^(?:\\+2519\\d{8}|09\\d{8})$/;\r",
											"    pm.expect(jsonData.phone).to.match(phoneRegex);\r",
											"});\r",
											"\r",
											"// ✅ Check if subject is valid (one of the allowed values, case-insensitive)\r",
											"pm.test(\"Subject must be one of the allowed values\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"subject\");\r",
											"\r",
											"    const allowedSubjects = [\"FEEDBACK\", \"JOIN_OUR_TEAM\", \"WORK_WITH_US\", \"REPORT\", \"OTHER\"];\r",
											"    pm.expect(allowedSubjects).to.include(jsonData.subject.toUpperCase());\r",
											"});\r",
											"\r",
											"// Validate UUID format for 'id'\r",
											"pm.test(\"ID is in UUID format\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\r",
											"    pm.expect(jsonData.id).to.match(uuidRegex);\r",
											"});\r",
											"\r",
											"// Validate 'createdAt' and 'updatedAt' timestamps\r",
											"pm.test(\"CreatedAt and UpdatedAt are valid ISO timestamps\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    const isoDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\r",
											"    pm.expect(jsonData.createdAt).to.match(isoDateRegex);\r",
											"    pm.expect(jsonData.updatedAt).to.match(isoDateRegex);\r",
											"});\r",
											"\r",
											"// ✅ Response body contains expected fields\r",
											"pm.test(\"Response body contains expected fields\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"fullName\", \"yidnek test\");\r",
											"    pm.expect(jsonData).to.have.property(\"email\", \"Yidnek@example.com\");\r",
											"    pm.expect(jsonData).to.have.property(\"phone\", \"+251966453734\");\r",
											"    pm.expect(jsonData).to.have.property(\"subject\", \"WORK_WITH_US\");\r",
											"    pm.expect(jsonData).to.have.property(\"message\", \"I would like to know more about your services.\");\r",
											"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
											"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
											"    pm.expect(jsonData.deletedAt).to.be.null;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"fullName\": \"yidnek test\",\r\n  \"email\": \"Yidnek@example.com\",\r\n  \"phone\": \"+251966453734\",\r\n  \"subject\": \"WORK_WITH_US\",\r\n  \"message\": \"I would like to know more about your services.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_URL}}/contact",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get FeedBack",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Parse the response body to JSON\r",
											"let jsonData = pm.response.json();\r",
											"\r",
											"// Ensure that data is an array and contains items\r",
											"pm.test(\"Response body should be an array with data\", function () {\r",
											"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"// Test to check if each item in the array contains the expected properties\r",
											"jsonData.forEach(function (item) {\r",
											"    pm.test(\"Each item should have (id, fullname,email, phone subject, message, CreatedAt and UpdatedAt) properties\", function () {\r",
											"        pm.expect(item).to.have.property(\"id\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"fullName\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"email\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"phone\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"subject\").that.is.a(\"string\");\r",
											"        pm.expect(item.message === null || typeof item.message === \"string\").to.be.true;\r",
											"        pm.expect(item).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
											"        pm.expect(item.deletedAt === null || typeof item.deletedAt === \"string\").to.be.true;\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/contact",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check-UnAutorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check if response status is 401 (Unauthorized)\r",
											"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Check if response contains the correct message for Unauthorized access\r",
											"pm.test(\"Response body contains Unauthorized message\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_URL}}/contact",
									"host": [
										"{{base_URL}}"
									],
									"path": [
										"contact"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{admin_token}}",
						"type": "string"
					}
				]
			}
		},
		{
			"name": "User API",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"console.clear();\r",
					"\r",
					"function login(role, url, credentials, tokenKey) {\r",
					"    return new Promise((resolve, reject) => {\r",
					"        pm.sendRequest({\r",
					"            url: url,\r",
					"            method: 'POST',\r",
					"            header: { 'Content-Type': 'application/json' },\r",
					"            body: {\r",
					"                mode: 'raw',\r",
					"                raw: JSON.stringify(credentials)\r",
					"            }\r",
					"        }, function (err, res) {\r",
					"            if (err) {\r",
					"                console.log(`❌ ${role} login error:`, err);\r",
					"                reject(err);\r",
					"            } else {\r",
					"                const token = res.json().accessToken;\r",
					"                if (token) {\r",
					"                    pm.environment.set(tokenKey, token);\r",
					"                    console.log(`✅ ${role} token stored`);\r",
					"                    resolve();\r",
					"                } else {\r",
					"                    reject(`❌ Token not found for ${role}`);\r",
					"                }\r",
					"            }\r",
					"        });\r",
					"    });\r",
					"}\r",
					"\r",
					"// Run login once before iterations\r",
					"Promise.all([\r",
					"    login(\"user\", \"https://api.medquizet.com/user-auth/login\", {\r",
					"        usernameOrEmail: \"Yidnek\",\r",
					"        password: \"pass\"\r",
					"    }, \"user_token\"),\r",
					"    login(\"admin\", \"https://api.medquizet.com/auth/login\", {\r",
					"        //  login(\"admin\", \"http://localhost:3001/auth/login\", {\r",
					"        usernameOrEmail: \"admin\",\r",
					"        password: \"Pa$$w0rd##\"\r",
					"    }, \"admin_token\")\r",
					"]).then(() => {\r",
					"    console.log(\"✅ All tokens set before run\");\r",
					"}).catch(err => {\r",
					"    console.log(\"❌ Error setting tokens:\", err);\r",
					"});\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}